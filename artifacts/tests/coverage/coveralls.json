{"service_name":"travis-ci","service_job_id":"27460734","git":{"branch":"(detached from 89adaa4)","head":{"id":"89adaa49d2a86777cdd3d5bbbaa7ecf7fc004b77","author_name":"James Harris","author_email":"james.harris@icecave.com.au","committer_name":"James Harris","committer_email":"james.harris@icecave.com.au","message":"CS"},"remotes":[{"name":"origin","url":"git:\/\/github.com\/IcecaveStudios\/archer.git"}]},"run_at":"2014-06-13 03:31:58 +0000","source_files":[{"name":"Configuration\/ComposerConfigurationReader.php","source":"<?php\nnamespace Icecave\\Archer\\Configuration;\n\nuse Icecave\\Archer\\FileSystem\\Exception\\ReadException;\nuse Icecave\\Archer\\FileSystem\\FileSystem;\nuse stdClass;\n\nclass ComposerConfigurationReader\n{\n    \/**\n     * @param FileSystem|null $fileSystem\n     *\/\n    public function __construct(FileSystem $fileSystem = null)\n    {\n        if (null === $fileSystem) {\n            $fileSystem = new FileSystem;\n        }\n\n        $this->fileSystem = $fileSystem;\n    }\n\n    \/**\n     * @return FileSystem\n     *\/\n    public function fileSystem()\n    {\n        return $this->fileSystem;\n    }\n\n    \/**\n     * @param string $projectPath\n     *\n     * @return stdClass\n     *\/\n    public function read($projectPath)\n    {\n        $composerPath = sprintf('%s\/composer.json', $projectPath);\n        $json = $this->fileSystem()->read($composerPath);\n\n        $data = json_decode($json);\n        if (JSON_ERROR_NONE !== json_last_error()) {\n            throw new ReadException($composerPath);\n        }\n\n        return $data;\n    }\n\n    private $fileSystem;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,1,48,43,null,null,48,48,null,null,null,null,null,null,4,null,null,null,null,null,null,null,null,null,2,2,null,2,2,1,null,null,1,null,null,null,null]},{"name":"Configuration\/ConfigurationFileFinder.php","source":"<?php\nnamespace Icecave\\Archer\\Configuration;\n\nuse Icecave\\Archer\\FileSystem\\FileSystem;\n\nclass ConfigurationFileFinder\n{\n    \/**\n     * @param FileSystem|null $fileSystem\n     *\/\n    public function __construct(FileSystem $fileSystem = null)\n    {\n        if (null === $fileSystem) {\n            $fileSystem = new FileSystem;\n        }\n\n        $this->fileSystem = $fileSystem;\n    }\n\n    \/**\n     * @return FileSystem\n     *\/\n    public function fileSystem()\n    {\n        return $this->fileSystem;\n    }\n\n    \/**\n     * @param array<string> $candidatePaths\n     * @param string        $defaultPath\n     *\n     * @return string\n     *\/\n    public function find(array $candidatePaths, $defaultPath)\n    {\n        foreach ($candidatePaths as $path) {\n            if ($this->fileSystem()->fileExists($path)) {\n                return $path;\n            }\n        }\n\n        return $defaultPath;\n    }\n\n    private $fileSystem;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,48,44,null,null,48,48,null,null,null,null,null,null,5,null,null,null,null,null,null,null,null,null,null,3,3,2,null,1,null,1,null,null,null,null]},{"name":"Configuration\/PHPConfigurationReader.php","source":"<?php\nnamespace Icecave\\Archer\\Configuration;\n\nuse Icecave\\Archer\\FileSystem\\FileSystem;\nuse Icecave\\Archer\\Support\\Isolator;\n\nclass PHPConfigurationReader\n{\n    \/**\n     * @param FileSystem|null $fileSystem\n     *\/\n    public function __construct(FileSystem $fileSystem = null, Isolator $isolator = null)\n    {\n        if (null === $fileSystem) {\n            $fileSystem = new FileSystem;\n        }\n\n        $this->fileSystem = $fileSystem;\n        $this->isolator = Isolator::get($isolator);\n    }\n\n    \/**\n     * @return FileSystem\n     *\/\n    public function fileSystem()\n    {\n        return $this->fileSystem;\n    }\n\n    \/**\n     * @param array<string> $candidatePaths\n     *\n     * @return array<string,mixed>\n     *\/\n    public function read(array $candidatePaths)\n    {\n        $settings = array();\n        foreach ($candidatePaths as $path) {\n            if ($this->fileSystem()->fileExists($path)) {\n                $settings = array_merge(\n                    $settings,\n                    $this->isolator->parse_ini_file($path)\n                );\n            }\n        }\n\n        return $settings;\n    }\n\n    private $fileSystem;\n    private $isolator;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,47,43,null,null,47,47,47,null,null,null,null,null,null,5,null,null,null,null,null,null,null,null,null,3,3,3,2,2,2,2,null,3,null,3,null,null,null,null,null]},{"name":"Console\/Application.php","source":"<?php\nnamespace Icecave\\Archer\\Console;\n\nuse Icecave\\Archer\\FileSystem\\FileSystem;\nuse Icecave\\Archer\\PackageInfo;\nuse Icecave\\Archer\\Support\\Isolator;\nuse Symfony\\Component\\Console\\Application as SymfonyApplication;\nuse Symfony\\Component\\Console\\Input\\ArrayInput;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nclass Application extends SymfonyApplication\n{\n    \/**\n     * @param string          $packageRoot\n     * @param FileSystem|null $fileSystem\n     * @param Isolator|null   $isolator\n     *\/\n    public function __construct(\n        $packageRoot,\n        FileSystem $fileSystem = null,\n        Isolator $isolator = null\n    ) {\n        parent::__construct(PackageInfo::NAME, PackageInfo::VERSION);\n\n        if (null === $fileSystem) {\n            $fileSystem = new FileSystem;\n        }\n\n        $this->packageRoot = $packageRoot;\n        $this->fileSystem = $fileSystem;\n        $this->isolator = Isolator::get($isolator);\n\n        $this->getHelperSet()->set(new Helper\\HiddenInputHelper);\n\n        $this->add(new Command\\CoverageCommand);\n        $this->add(new Command\\DocumentationCommand);\n        $this->add(new Command\\TestCommand);\n        $this->add(new Command\\UpdateCommand);\n\n        $this->add(new Command\\Internal\\UpdateBinariesCommand($fileSystem));\n\n        $this->add(new Command\\Travis\\BuildCommand(null, null, $fileSystem, $isolator));\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function packageRoot()\n    {\n        return $this->packageRoot;\n    }\n\n    \/**\n     * @return FileSystem\n     *\/\n    public function fileSystem()\n    {\n        return $this->fileSystem;\n    }\n\n    \/**\n     * @param InputInterface  $input\n     * @param OutputInterface $output\n     *\n     * @return integer\n     *\/\n    public function doRun(InputInterface $input, OutputInterface $output)\n    {\n        $rawArguments = $this->rawArguments();\n        if (array() === $rawArguments) {\n            $input = new ArrayInput(\n                array(\n                    'command' => $this->defaultCommandName(),\n                )\n            );\n        }\n\n        return parent::doRun($input, $output);\n    }\n\n    \/**\n     * @return array<string>\n     *\/\n    public function rawArguments()\n    {\n        $argv = $_SERVER['argv'];\n        array_shift($argv);\n\n        return $argv;\n    }\n\n    \/**\n     * @return string\n     *\/\n    protected function defaultCommandName()\n    {\n        return 'test';\n    }\n\n    private $packageRoot;\n    private $fileSystem;\n    private $isolator;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,41,null,41,34,1,null,41,41,41,null,41,null,41,41,41,41,null,41,null,41,41,null,null,null,null,null,null,37,null,null,null,null,null,null,null,2,null,null,null,null,null,null,null,null,null,null,1,1,1,null,1,null,1,null,null,1,null,null,null,null,null,null,null,1,1,null,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null]},{"name":"Console\/Command\/AbstractPHPUnitCommand.php","source":"<?php\nnamespace Icecave\\Archer\\Console\\Command;\n\nuse Icecave\\Archer\\Configuration\\ConfigurationFileFinder;\nuse Icecave\\Archer\\Configuration\\PHPConfigurationReader;\nuse Icecave\\Archer\\FileSystem\\FileSystem;\nuse Icecave\\Archer\\Process\\PHPUnitExecutableFinder;\nuse Icecave\\Archer\\Process\\ProcessFactory;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\ConsoleOutputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Process\\PhpExecutableFinder;\nuse Symfony\\Component\\Process\\Process;\n\nabstract class AbstractPHPUnitCommand extends Command\n{\n    \/**\n     * @param FileSystem|null              $fileSystem\n     * @param PhpExecutableFinder|null     $phpFinder\n     * @param PHPUnitExecutableFinder|null $phpunitFinder\n     * @param PHPConfigurationReader|null  $phpConfigurationReader\n     * @param ConfigurationFileFinder|null $configurationFileFinder\n     * @param ProcessFactory|null          $processFactory\n     * @param string|null                  $commandName\n     *\/\n    public function __construct(\n        FileSystem $fileSystem = null,\n        PhpExecutableFinder $phpFinder = null,\n        PHPUnitExecutableFinder $phpunitFinder = null,\n        PHPConfigurationReader $phpConfigurationReader = null,\n        ConfigurationFileFinder $configurationFileFinder = null,\n        ProcessFactory $processFactory = null,\n        $commandName = null\n    ) {\n        if (null === $fileSystem) {\n            $fileSystem = new FileSystem;\n        }\n        if (null === $phpFinder) {\n            $phpFinder = new PhpExecutableFinder;\n        }\n        if (null === $phpunitFinder) {\n            $phpunitFinder = new PHPUnitExecutableFinder;\n        }\n        if (null === $phpConfigurationReader) {\n            $phpConfigurationReader = new PHPConfigurationReader;\n        }\n        if (null === $configurationFileFinder) {\n            $configurationFileFinder = new ConfigurationFileFinder;\n        }\n        if (null === $processFactory) {\n            $processFactory = new ProcessFactory;\n        }\n\n        $this->fileSystem = $fileSystem;\n        $this->phpFinder = $phpFinder;\n        $this->phpunitFinder = $phpunitFinder;\n        $this->phpConfigurationReader = $phpConfigurationReader;\n        $this->configurationFileFinder = $configurationFileFinder;\n        $this->processFactory = $processFactory;\n\n        parent::__construct($commandName);\n\n        $this->ignoreValidationErrors();\n    }\n\n    \/**\n     * @return FileSystem\n     *\/\n    public function fileSystem()\n    {\n        return $this->fileSystem;\n    }\n\n    \/**\n     * @return PhpExecutableFinder\n     *\/\n    public function phpFinder()\n    {\n        return $this->phpFinder;\n    }\n\n    \/**\n     * @return PHPUnitExecutableFinder\n     *\/\n    public function phpunitFinder()\n    {\n        return $this->phpunitFinder;\n    }\n\n    \/**\n     * @return PHPConfigurationReader\n     *\/\n    public function phpConfigurationReader()\n    {\n        return $this->phpConfigurationReader;\n    }\n\n    \/**\n     * @return ConfigurationFileFinder\n     *\/\n    public function configurationFileFinder()\n    {\n        return $this->configurationFileFinder;\n    }\n\n    \/**\n     * @return ProcessFactory\n     *\/\n    public function processFactory()\n    {\n        return $this->processFactory;\n    }\n\n    \/**\n     * @param InputInterface  $input\n     * @param OutputInterface $output\n     *\n     * @return integer\n     *\/\n    protected function execute(InputInterface $input, OutputInterface $output)\n    {\n        $phpPath = $this->phpFinder()->find();\n        $output->writeln(sprintf('<info>Using PHP:<\/info> %s', $phpPath));\n        $phpunitPath = $this->phpunitFinder()->find();\n        $output->writeln(sprintf('<info>Using PHPUnit:<\/info> %s', $phpunitPath));\n\n        $process = $this->processFactory()->createFromArray(\n            $this->generateArguments(\n                $phpPath,\n                $phpunitPath,\n                $this->rawArguments()\n            )\n        );\n        $process->setTimeout(null);\n\n        return $this->passthru($process, $output);\n    }\n\n    public function getHelp()\n    {\n        $phpPath = $this->phpFinder()->find();\n        $phpunitPath = $this->phpunitFinder()->find();\n        $process = $this->processFactory()->create($phpPath, $phpunitPath, '--help');\n\n        $help  = '<info>This command forwards all arguments to PHPUnit.<\/info>';\n        $help .= PHP_EOL;\n        $help .= PHP_EOL;\n\n        $process->run(\n            function ($type, $buffer) use (&$help) {\n                if ('out' === $type) {\n                    $help .= $buffer;\n                }\n            }\n        );\n\n        return $help;\n    }\n\n    \/**\n     * @param Process                $process\n     * @param ConsoleOutputInterface $output\n     *\n     * @return integer\n     *\/\n    protected function passthru(Process $process, ConsoleOutputInterface $output)\n    {\n        return $process->run(\n            function ($type, $buffer) use ($output) {\n                if ('out' === $type) {\n                    $output->write(\n                        $buffer,\n                        false,\n                        OutputInterface::OUTPUT_RAW\n                    );\n                } else {\n                    $output->getErrorOutput()->write(\n                        $buffer,\n                        false,\n                        OutputInterface::OUTPUT_RAW\n                    );\n                }\n            }\n        );\n    }\n\n    \/**\n     * @param string        $phpPath\n     * @param string        $phpunitPath\n     * @param array<string> $phpunitArguments\n     *\n     * @return array<string>\n     *\/\n    protected function generateArguments(\n        $phpPath,\n        $phpunitPath,\n        array $phpunitArguments\n    ) {\n        $phpunitArguments = array_filter(\n            array_map(\n                function ($element) {\n                    switch ($element) {\n                        case '--quiet':\n                        case '-q':\n                        case '--version':\n                        case '-V':\n                        case '--no-ansi':\n                        case '--no-interaction':\n                        case '-n':\n                            return null;\n                        case '--ansi':\n                            return '--color';\n                    }\n\n                    return $element;\n                },\n                $phpunitArguments\n            )\n        );\n\n        return array_merge(\n            array($phpPath),\n            $this->phpConfigurationArguments($this->readPHPConfiguration()),\n            array(\n                $phpunitPath,\n                '--configuration',\n                $this->findPHPUnitConfiguration(),\n            ),\n            $phpunitArguments\n        );\n    }\n\n    \/**\n     * @param array<string,mixed> $configuration\n     *\n     * @return array<string>\n     *\/\n    protected function phpConfigurationArguments(array $configuration)\n    {\n        $arguments = array();\n        foreach ($configuration as $key => $value) {\n            $arguments[] = '--define';\n            $arguments[] = sprintf('%s=%s', $key, $value);\n        }\n\n        return $arguments;\n    }\n\n    \/**\n     * @return array<string>\n     *\/\n    public function rawArguments()\n    {\n        $arguments = $this->getApplication()->rawArguments();\n        array_shift($arguments);\n\n        return $arguments;\n    }\n\n    \/**\n     * @return array<string,mixed>\n     *\/\n    abstract protected function readPHPConfiguration();\n\n    \/**\n     * @return string\n     *\/\n    abstract protected function findPHPUnitConfiguration();\n\n    private $fileSystem;\n    private $phpFinder;\n    private $phpunitFinder;\n    private $phpConfigurationReader;\n    private $configurationFileFinder;\n    private $processFactory;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,53,43,null,53,43,null,53,43,null,53,43,null,53,43,null,53,43,null,null,53,53,53,53,53,53,null,53,null,53,53,null,null,null,null,null,null,4,null,null,null,null,null,null,null,8,null,null,null,null,null,null,null,8,null,null,null,null,null,null,null,7,null,null,null,null,null,null,null,7,null,null,null,null,null,null,null,8,null,null,null,null,null,null,null,null,null,null,3,3,3,3,null,3,3,3,3,3,3,3,3,null,3,null,null,null,null,1,1,1,null,1,1,1,null,1,null,1,1,null,1,1,null,1,null,null,null,null,null,null,null,null,null,null,3,null,3,3,3,3,null,3,3,3,3,3,null,3,null,3,3,null,null,null,null,null,null,null,null,null,null,null,null,null,null,5,5,null,null,5,5,5,5,5,5,5,2,5,2,null,null,3,5,null,5,5,null,5,5,5,null,5,5,5,5,null,5,null,null,null,null,null,null,null,null,null,5,5,3,3,5,null,5,null,null,null,null,null,null,null,3,3,null,3,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Console\/Command\/CoverageCommand.php","source":"<?php\nnamespace Icecave\\Archer\\Console\\Command;\n\nuse Icecave\\Archer\\Configuration\\ConfigurationFileFinder;\nuse Icecave\\Archer\\Configuration\\PHPConfigurationReader;\nuse Icecave\\Archer\\FileSystem\\FileSystem;\nuse Icecave\\Archer\\Process\\PHPUnitExecutableFinder;\nuse Icecave\\Archer\\Process\\ProcessFactory;\nuse Icecave\\Archer\\Support\\Liftoff\\Launcher;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Process\\PhpExecutableFinder;\nuse Symfony\\Component\\Process\\Process;\n\nclass CoverageCommand extends AbstractPHPUnitCommand\n{\n    \/**\n     * @param FileSystem|null              $fileSystem\n     * @param PhpExecutableFinder|null     $phpFinder\n     * @param PHPUnitExecutableFinder|null $phpunitFinder\n     * @param PHPConfigurationReader|null  $phpConfigurationReader\n     * @param ConfigurationFileFinder|null $configurationFileFinder\n     * @param ProcessFactory|null          $processFactory\n     * @param string|null                  $commandName\n     *\/\n    public function __construct(\n        FileSystem $fileSystem = null,\n        PhpExecutableFinder $phpFinder = null,\n        PHPUnitExecutableFinder $phpunitFinder = null,\n        PHPConfigurationReader $phpConfigurationReader = null,\n        ConfigurationFileFinder $configurationFileFinder = null,\n        ProcessFactory $processFactory = null,\n        Launcher $launcher = null,\n        $commandName = null\n    ) {\n        if (null === $launcher) {\n            $launcher = new Launcher;\n        }\n\n        $this->launcher = $launcher;\n\n        parent::__construct(\n            $fileSystem,\n            $phpFinder,\n            $phpunitFinder,\n            $phpConfigurationReader,\n            $configurationFileFinder,\n            $processFactory,\n            $commandName\n        );\n    }\n\n    \/**\n     * @return Launcher\n     *\/\n    public function launcher()\n    {\n        return $this->launcher;\n    }\n\n    protected function configure()\n    {\n        $this->setName('coverage');\n        $this->setDescription(\n            'Run the test suite for a project and generate a code coverage report.'\n        );\n\n        $this->addArgument(\n            'argument',\n            InputArgument::OPTIONAL | InputArgument::IS_ARRAY,\n            'Argument(s) to pass to PHPUnit.'\n        );\n\n        $this->addOption(\n            'open',\n            'o',\n            InputOption::VALUE_NONE,\n            'Open the generated report in your default web browser.'\n        );\n    }\n\n    \/**\n     * @param InputInterface  $input\n     * @param OutputInterface $output\n     *\n     * @return integer\n     *\/\n    protected function execute(InputInterface $input, OutputInterface $output)\n    {\n        $phpunitResult = parent::execute($input, $output);\n        if (0 !== $phpunitResult) {\n            return $phpunitResult;\n        }\n\n        if ($input->getOption('open')) {\n            $output->writeln('');\n            $output->write('<info>Opening coverage report... <\/info>');\n            $this->launcher()->launch('.\/artifacts\/tests\/coverage\/index.html');\n            $output->writeln('done.');\n        }\n\n        return 0;\n    }\n\n    \/**\n     * @return array<string,mixed>\n     *\/\n    protected function readPHPConfiguration()\n    {\n        return $this->phpConfigurationReader()->read(\n            array(\n                '.\/vendor\/icecave\/archer\/res\/php\/php.ini',\n                '.\/vendor\/icecave\/archer\/res\/php\/php.coverage.ini',\n                '.\/test\/php.ini',\n                '.\/test\/php.coverage.ini',\n                '.\/php.ini',\n                '.\/php.coverage.ini',\n            )\n        );\n    }\n\n    \/**\n     * @return string\n     *\/\n    protected function findPHPUnitConfiguration()\n    {\n        return $this->configurationFileFinder()->find(\n            array(\n                '.\/phpunit.coverage.xml',\n                '.\/test\/phpunit.coverage.xml',\n            ),\n            '.\/vendor\/icecave\/archer\/res\/phpunit\/phpunit.coverage.xml'\n        );\n    }\n\n    \/**\n     * @param string        $phpPath\n     * @param string        $phpunitPath\n     * @param array<string> $phpunitArguments\n     *\n     * @return array<string>\n     *\/\n    protected function generateArguments(\n        $phpPath,\n        $phpunitPath,\n        array $phpunitArguments\n    ) {\n        $phpunitArguments = array_filter(\n            $phpunitArguments,\n            function ($element) {\n                switch ($element) {\n                    case '--open':\n                    case '-o':\n                        return false;\n                }\n\n                return true;\n            }\n        );\n\n        return parent::generateArguments(\n            $phpPath,\n            $phpunitPath,\n            $phpunitArguments\n        );\n    }\n\n    private $launcher;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,47,42,null,null,47,null,47,47,47,47,47,47,47,null,47,47,null,null,null,null,null,null,3,null,null,null,null,47,47,null,47,null,47,47,47,null,47,null,47,47,47,47,null,47,47,null,null,null,null,null,null,null,null,null,2,2,1,null,null,1,1,1,1,1,null,null,1,null,null,null,null,null,null,null,2,null,2,2,2,2,2,2,null,2,null,null,null,null,null,null,null,2,null,2,2,2,null,2,null,null,null,null,null,null,null,null,null,null,null,null,null,null,3,3,null,null,3,3,1,null,null,3,null,3,null,3,3,3,null,3,null,null,null,null]},{"name":"Console\/Command\/DocumentationCommand.php","source":"<?php\nnamespace Icecave\\Archer\\Console\\Command;\n\nuse Icecave\\Archer\\Documentation\\DocumentationGenerator;\nuse Icecave\\Archer\\Support\\Liftoff\\Launcher;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nclass DocumentationCommand extends Command\n{\n    public function __construct(\n        DocumentationGenerator $generator = null,\n        Launcher $launcher = null\n    ) {\n        if (null === $generator) {\n            $generator = new DocumentationGenerator;\n        }\n        if (null === $launcher) {\n            $launcher = new Launcher;\n        }\n\n        $this->generator = $generator;\n        $this->launcher = $launcher;\n\n        parent::__construct();\n    }\n\n    \/**\n     * @return DocumentationGenerator\n     *\/\n    public function generator()\n    {\n        return $this->generator;\n    }\n\n    \/**\n     * @return Launcher\n     *\/\n    public function launcher()\n    {\n        return $this->launcher;\n    }\n\n    protected function configure()\n    {\n        $this->setName('documentation');\n        $this->setDescription('Generate documentation for a project.');\n        $this->addOption(\n            'open',\n            'o',\n            InputOption::VALUE_NONE,\n            'Open the generated documentation in your default web browser.'\n        );\n    }\n\n    \/**\n     * @param InputInterface  $input\n     * @param OutputInterface $output\n     *\/\n    protected function execute(InputInterface $input, OutputInterface $output)\n    {\n        $output->write('<info>Generating documentation... <\/info>');\n        $this->generator()->generate();\n        $output->writeln('done.');\n\n        if ($input->getOption('open')) {\n            $output->write('<info>Opening documentation... <\/info>');\n            $this->launcher()->launch('.\/artifacts\/documentation\/api\/index.html');\n            $output->writeln('done.');\n        }\n    }\n\n    private $generator;\n    private $launcher;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,46,42,null,46,42,null,null,46,46,null,46,46,null,null,null,null,null,null,4,null,null,null,null,null,null,null,3,null,null,null,null,46,46,46,46,46,46,null,46,46,null,null,null,null,null,null,null,2,2,2,null,2,1,1,1,null,2,null,null,null,null]},{"name":"Console\/Command\/Internal\/AbstractInternalCommand.php","source":"<?php\nnamespace Icecave\\Archer\\Console\\Command\\Internal;\n\nuse Icecave\\Archer\\FileSystem\\FileSystem;\nuse Symfony\\Component\\Console\\Command\\Command;\n\nabstract class AbstractInternalCommand extends Command\n{\n    \/**\n     * @param boolean|null $isEnabled\n     *\/\n    public static function setIsEnabled($isEnabled)\n    {\n        self::$isEnabled = $isEnabled;\n    }\n\n    \/**\n     * @param FileSystem|null $fileSystem\n     *\/\n    public function __construct(FileSystem $fileSystem = null)\n    {\n        if (null === $fileSystem) {\n            $fileSystem = new FileSystem;\n        }\n\n        $this->fileSystem = $fileSystem;\n\n        parent::__construct();\n    }\n\n    \/**\n     * @return FileSystem\n     *\/\n    public function fileSystem()\n    {\n        return $this->fileSystem;\n    }\n\n    public function isEnabled()\n    {\n        if (null === self::$isEnabled) {\n            $composerPath = sprintf(\n                '%s\/composer.json',\n                $this->getApplication()->packageRoot()\n            );\n\n            if ($this->fileSystem()->fileExists($composerPath)) {\n                $config = json_decode(\n                    $this->fileSystem()->read($composerPath)\n                );\n\n                self::setIsEnabled(\n                    property_exists($config, 'name') &&\n                    'icecave\/archer' === $config->name\n                );\n            } else {\n                self::setIsEnabled(false);\n            }\n        }\n\n        return self::$isEnabled;\n    }\n\n    private static $isEnabled;\n    private $fileSystem;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,8,8,null,null,null,null,null,null,41,0,null,null,41,null,41,41,null,null,null,null,null,null,8,null,null,null,null,41,8,8,8,8,null,8,1,1,1,null,1,1,1,1,1,8,null,null,null,41,null,null,null,null,null]},{"name":"Console\/Command\/Internal\/UpdateBinariesCommand.php","source":"<?php\nnamespace Icecave\\Archer\\Console\\Command\\Internal;\n\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Console\\Command\\Command;\n\nclass UpdateBinariesCommand extends AbstractInternalCommand\n{\n    protected function configure()\n    {\n        $this->setName('internal:update-binaries');\n        $this->setDescription('Update the PHAR packages that are bundled with icecave\/archer.');\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output)\n    {\n        foreach (array('woodhouse') as $package) {\n            $output->writeln(sprintf('Fetching <info>icecave\/%1$s<\/info> PHAR into <info>bin\/%1$s<\/info>.', $package));\n            $this->updateBinary($package);\n        }\n    }\n\n    protected function updateBinary($packageName)\n    {\n        $content = $this->fileSystem()->read(\n            sprintf(\n                'http:\/\/icecavestudios.github.io\/%s\/%s',\n                rawurlencode($packageName),\n                rawurlencode($packageName)\n            )\n        );\n        $target = sprintf(\n            '%s\/bin\/woodhouse',\n            $this->getApplication()->packageRoot(),\n            $packageName\n        );\n        $this->fileSystem()->write($target, $content);\n        $this->fileSystem()->chmod($target, 0755);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,41,41,41,null,null,null,0,0,0,0,0,null,null,null,0,0,0,0,0,0,0,0,0,0,null,0,0,0,0,null]},{"name":"Console\/Command\/TestCommand.php","source":"<?php\nnamespace Icecave\\Archer\\Console\\Command;\n\nuse Symfony\\Component\\Console\\Input\\InputArgument;\n\nclass TestCommand extends AbstractPHPUnitCommand\n{\n    protected function configure()\n    {\n        $this->setName('test');\n        $this->setDescription('Run the test suite for a project.');\n\n        $this->addArgument(\n            'argument',\n            InputArgument::OPTIONAL | InputArgument::IS_ARRAY,\n            'Argument(s) to pass to PHPUnit.'\n        );\n    }\n\n    \/**\n     * @return array<string,mixed>\n     *\/\n    protected function readPHPConfiguration()\n    {\n        return $this->phpConfigurationReader()->read(\n            array(\n                '.\/vendor\/icecave\/archer\/res\/php\/php.ini',\n                '.\/test\/php.ini',\n                '.\/php.ini',\n            )\n        );\n    }\n\n    \/**\n     * @return string\n     *\/\n    protected function findPHPUnitConfiguration()\n    {\n        return $this->configurationFileFinder()->find(\n            array(\n                '.\/phpunit.xml',\n                '.\/phpunit.xml.dist',\n                '.\/test\/phpunit.xml',\n                '.\/test\/phpunit.xml.dist',\n            ),\n            '.\/vendor\/icecave\/archer\/res\/phpunit\/phpunit.xml'\n        );\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,43,43,null,43,43,43,null,43,43,null,null,null,null,null,null,1,null,1,1,1,null,1,null,null,null,null,null,null,null,1,null,1,1,1,1,1,null,1,null,null]},{"name":"Console\/Command\/Travis\/AbstractTravisCommand.php","source":"<?php\nnamespace Icecave\\Archer\\Console\\Command\\Travis;\n\nuse Icecave\\Archer\\Support\\Isolator;\nuse Symfony\\Component\\Console\\Command\\Command;\n\nabstract class AbstractTravisCommand extends Command\n{\n    \/**\n     * @param Isolator|null $isolator\n     *\/\n    public function __construct(Isolator $isolator = null, $name = null)\n    {\n        $this->isolator = Isolator::get($isolator);\n\n        parent::__construct($name);\n    }\n\n    public function isEnabled()\n    {\n        return $this->isolator->getenv('TRAVIS') ? true : false;\n    }\n\n    protected $isolator;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,42,null,42,42,null,null,null,42,null,null,null,null]},{"name":"Console\/Command\/Travis\/BuildCommand.php","source":"<?php\nnamespace Icecave\\Archer\\Console\\Command\\Travis;\n\nuse Icecave\\Archer\\Coveralls\\CoverallsClient;\nuse Icecave\\Archer\\FileSystem\\FileSystem;\nuse Icecave\\Archer\\GitHub\\GitHubClient;\nuse Icecave\\Archer\\Support\\Isolator;\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nclass BuildCommand extends AbstractTravisCommand\n{\n    public function __construct(\n        GitHubClient $githubClient = null,\n        CoverallsClient $coverallsClient = null,\n        FileSystem $fileSystem = null,\n        Isolator $isolator = null\n    ) {\n        if (null === $githubClient) {\n            $githubClient = new GitHubClient;\n        }\n\n        if (null === $coverallsClient) {\n            $coverallsClient = new CoverallsClient;\n        }\n\n        if (null === $fileSystem) {\n            $fileSystem = new FileSystem;\n        }\n\n        $this->githubClient = $githubClient;\n        $this->coverallsClient = $coverallsClient;\n        $this->fileSystem = $fileSystem;\n\n        parent::__construct($isolator);\n    }\n\n    \/**\n     * @return GitHubClient\n     *\/\n    public function githubClient()\n    {\n        return $this->githubClient;\n    }\n\n    \/**\n     * @return CoverallsClient\n     *\/\n    public function coverallsClient()\n    {\n        return $this->coverallsClient;\n    }\n\n    \/**\n     * @param Application|null $application\n     *\/\n    public function setApplication(Application $application = null)\n    {\n        parent::setApplication($application);\n\n        if ($application) {\n            $this->githubClient->setUserAgent(\n                $application->getName() . '\/' . $application->getVersion()\n            );\n        }\n    }\n\n    protected function configure()\n    {\n        $this->setName('travis:build');\n        $this->setDescription('Build and execute tests under Travis CI.');\n\n        $this->addArgument(\n            'path',\n            InputArgument::OPTIONAL,\n            'The path to the root of the project.',\n            '.'\n        );\n\n        $this->addOption(\n            'always-publish',\n            'a',\n            InputOption::VALUE_NONE,\n            'Always publish test artifacts, even when using Coveralls.'\n        );\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output)\n    {\n        $archerRoot       = $this->getApplication()->packageRoot();\n        $packageRoot      = $input->getArgument('path');\n        $travisPhpVersion = $this->isolator->getenv('TRAVIS_PHP_VERSION');\n        $publishVersion   = $this->isolator->getenv('ARCHER_PUBLISH_VERSION');\n        $currentBranch    = $this->isolator->getenv('TRAVIS_BRANCH');\n        $authToken        = $this->isolator->getenv('ARCHER_TOKEN');\n        $buildNumber      = $this->isolator->getenv('TRAVIS_BUILD_NUMBER');\n        $repoSlug         = $this->isolator->getenv('TRAVIS_REPO_SLUG');\n        $isPullRequest    = is_numeric($this->isolator->getenv('TRAVIS_PULL_REQUEST'));\n\n        list($repoOwner, $repoName) = explode('\/', $repoSlug);\n\n        $isPublishVersion = $travisPhpVersion === $publishVersion;\n\n        if ($authToken && $isPublishVersion && !$isPullRequest) {\n            $this->githubClient()->setAuthToken($authToken);\n            $publishArtifacts = $this->githubClient()->defaultBranch($repoOwner, $repoName) === $currentBranch;\n        } else {\n            $publishArtifacts = false;\n        }\n\n        $publishCoveralls = false;\n        if ($isPublishVersion) {\n            $output->write('Checking for Coveralls... ');\n            $publishCoveralls = $this->coverallsClient()->exists($repoOwner, $repoName);\n            if ($publishCoveralls) {\n                $output->writeln('enabled.');\n            } else {\n                $output->writeln('not enabled.');\n            }\n        }\n\n        if ($publishArtifacts || $publishCoveralls) {\n            \/\/ Run tests with reports\n            $testsExitCode = 255;\n            $this->isolator->passthru($archerRoot . '\/bin\/archer coverage', $testsExitCode);\n        } else {\n            \/\/ Run default tests\n            $testsExitCode = 255;\n            $this->isolator->passthru($archerRoot . '\/bin\/archer test', $testsExitCode);\n        }\n\n        $coverallsExitCode = 0;\n        if ($publishCoveralls) {\n            $output->write('Publishing Coveralls data... ');\n            $coverallsConfigPath = $packageRoot . '\/.coveralls.yml';\n\n            if (!$this->isolator->file_exists($coverallsConfigPath)) {\n                $this->isolator->copy($archerRoot . '\/res\/coveralls\/coveralls.yml', $coverallsConfigPath);\n            }\n\n            $coverallsExitCode = 255;\n            $this->isolator->passthru(\n                sprintf(\n                    '%s\/vendor\/bin\/coveralls --config %s',\n                    $packageRoot,\n                    escapeshellarg($coverallsConfigPath)\n                ),\n                $coverallsExitCode\n            );\n\n            if (0 === $coverallsExitCode) {\n                $output->writeln('done.');\n            } else {\n                $output->writeln('failed.');\n            }\n        }\n\n        $documentationExitCode = 0;\n        $publishExitCode = 0;\n        if ($publishArtifacts) {\n            \/\/ Generate documentation\n            if ($this->isolator->is_dir($packageRoot . '\/src')) {\n                $documentationExitCode = 255;\n                $this->isolator->passthru($archerRoot . '\/bin\/archer documentation', $documentationExitCode);\n            }\n\n            \/\/ Publish artifacts\n            $command  = $archerRoot . '\/bin\/woodhouse';\n            $command .= ' publish %s';\n            $command .= ' %s\/artifacts:artifacts';\n            $command .= ' --message \"Publishing artifacts from build %d.\"';\n            $command .= ' --auth-token-env ARCHER_TOKEN';\n            $command .= ' --no-interaction';\n            $command .= ' --verbose';\n\n            if ($publishCoveralls && !$input->getOption('always-publish')) {\n                \/\/ Remove test artifacts if coveralls is being used ...\n                $this->fileSystem->delete($packageRoot . '\/artifacts\/tests');\n            } else {\n                $command .= ' --coverage-image artifacts\/images\/coverage.png';\n                $command .= ' --coverage-phpunit artifacts\/tests\/coverage\/coverage.txt';\n                $command .= ' --image-theme buckler\/buckler';\n            }\n\n            $command = sprintf(\n                $command,\n                escapeshellarg($repoSlug),\n                $packageRoot,\n                $buildNumber\n            );\n\n            $publishExitCode = 255;\n            $this->isolator->passthru($command, $publishExitCode);\n        }\n\n        if ($testsExitCode !== 0) {\n            return $testsExitCode;\n        }\n        if ($coverallsExitCode !== 0) {\n            return $coverallsExitCode;\n        }\n        if ($documentationExitCode !== 0) {\n            return $documentationExitCode;\n        }\n\n        return $publishExitCode;\n    }\n\n    private $githubClient;\n    private $coverallsClient;\n    private $fileSystem;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,41,41,null,null,41,41,null,null,41,1,null,null,41,41,41,null,41,41,null,null,null,null,null,null,11,null,null,null,null,null,null,null,14,null,null,null,null,null,null,null,41,null,41,41,41,41,null,41,null,null,null,41,41,null,41,41,41,41,null,41,null,41,41,41,41,null,41,41,null,null,null,13,13,13,13,13,13,13,13,13,null,13,null,13,null,13,9,9,9,4,null,null,13,13,12,12,12,4,4,8,null,null,null,13,null,9,9,9,null,4,4,null,null,13,13,4,4,null,4,4,null,null,4,4,4,4,4,4,4,null,4,null,4,2,2,2,null,null,null,13,13,13,null,8,7,7,null,null,null,8,8,8,8,8,8,8,null,8,null,2,2,6,6,6,null,null,8,8,8,8,null,8,null,8,8,null,null,13,5,null,8,2,null,6,1,null,null,5,null,null,null,null,null,null]},{"name":"Console\/Command\/UpdateCommand.php","source":"<?php\nnamespace Icecave\\Archer\\Console\\Command;\n\nuse Icecave\\Archer\\FileSystem\\Exception\\ReadException;\nuse Icecave\\Archer\\Git\\GitConfigReaderFactory;\nuse Icecave\\Archer\\GitHub\\GitHubClient;\nuse Icecave\\Archer\\Git\\GitDotFilesManager;\nuse Icecave\\Archer\\Process\\ProcessFactory;\nuse Icecave\\Archer\\Travis\\TravisClient;\nuse Icecave\\Archer\\Travis\\TravisConfigManager;\nuse RuntimeException;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nclass UpdateCommand extends Command\n{\n    \/**\n     * @param GitDotFilesManager|null     $dotFilesManager\n     * @param GitConfigReaderFactory|null $configReaderFactory\n     * @param TravisClient|null           $travisClient\n     * @param TravisConfigManager|null    $travisConfigManager\n     * @param ProcessFactory|null         $processFactory\n     *\/\n    public function __construct(\n        GitDotFilesManager $dotFilesManager = null,\n        GitConfigReaderFactory $configReaderFactory = null,\n        TravisClient $travisClient = null,\n        TravisConfigManager $travisConfigManager = null,\n        ProcessFactory $processFactory = null\n    ) {\n        if (null === $dotFilesManager) {\n            $dotFilesManager = new GitDotFilesManager;\n        }\n        if (null === $configReaderFactory) {\n            $configReaderFactory = new GitConfigReaderFactory;\n        }\n        if (null === $travisClient) {\n            $travisClient = new TravisClient;\n        }\n        if (null === $travisConfigManager) {\n            $travisConfigManager = new TravisConfigManager;\n        }\n        if (null === $processFactory) {\n            $processFactory = new ProcessFactory;\n        }\n\n        $this->dotFilesManager = $dotFilesManager;\n        $this->configReaderFactory = $configReaderFactory;\n        $this->travisClient = $travisClient;\n        $this->travisConfigManager = $travisConfigManager;\n        $this->processFactory = $processFactory;\n\n        parent::__construct();\n    }\n\n    \/**\n     * @return GitDotFilesManager\n     *\/\n    public function dotFilesManager()\n    {\n        return $this->dotFilesManager;\n    }\n\n    \/**\n     * @return GitConfigReaderFactory\n     *\/\n    public function configReaderFactory()\n    {\n        return $this->configReaderFactory;\n    }\n\n    \/**\n     * @return TravisClient\n     *\/\n    public function travisClient()\n    {\n        return $this->travisClient;\n    }\n\n    \/**\n     * @return TravisConfigManager\n     *\/\n    public function travisConfigManager()\n    {\n        return $this->travisConfigManager;\n    }\n\n    \/**\n     * @return ProcessFactory\n     *\/\n    public function processFactory()\n    {\n        return $this->processFactory;\n    }\n\n    protected function configure()\n    {\n        $this->setName('update');\n        $this->setDescription('Update a project with the latest Archer configuration.');\n\n        $this->addArgument(\n            'path',\n            InputArgument::OPTIONAL,\n            'The path to the root of the project.',\n            '.'\n        );\n\n        $this->addOption(\n            'authorize',\n            'a',\n            InputOption::VALUE_NONE,\n            'Set up authorization for this repository.'\n        );\n        $this->addOption(\n            'auth-token',\n            't',\n            InputOption::VALUE_REQUIRED,\n            'A GitHub OAuth token with succificent access to push to this repository.'\n        );\n        $this->addOption(\n            'update-public-key',\n            'k',\n            InputOption::VALUE_NONE,\n            'Update the Travis CI public key for this repository.'\n        );\n        $this->addOption(\n            'username',\n            'u',\n            InputOption::VALUE_REQUIRED,\n            'A GitHub username to use for API authentication.'\n        );\n        $this->addOption(\n            'password',\n            'p',\n            InputOption::VALUE_REQUIRED,\n            'A GitHub password to use for API authentication.'\n        );\n    }\n\n    \/**\n     * @param InputInterface  $input\n     * @param OutputInterface $output\n     *\n     * @return integer\n     *\/\n    protected function execute(InputInterface $input, OutputInterface $output)\n    {\n        $archerRoot  = $this->getApplication()->packageRoot();\n        $packageRoot = $input->getArgument('path');\n\n        \/\/ Update Git dotfiles ...\n        foreach ($this->dotFilesManager()->updateDotFiles($archerRoot, $packageRoot) as $filename => $updated) {\n            if ($updated) {\n                $output->writeln(sprintf('Updated <info>%s<\/info>.', $filename));\n            }\n        }\n\n        $configReader = $this->configReaderFactory()->create($packageRoot);\n\n        \/\/ All the remaining operations are only relevant to GitHub repositories ...\n        if (!$configReader->isGitHubRepository()) {\n            return 0;\n        }\n\n        \/\/ Fetch the OAuth token if necessary.\n        $token = $input->getOption('auth-token');\n        if (null === $token && $input->getOption('authorize')) {\n            $output->writeln('Searching for existing authorization.');\n            list($username, $password) = $this->credentials($input, $output);\n\n            $token = $this->existingToken($username, $password);\n            if (null === $token) {\n                $output->writeln('No existing authorization found.');\n                $output->writeln('Creating new authorization.');\n\n                $token = $this->createToken($username, $password);\n            } else {\n                $output->writeln('Existing authorization found.');\n            }\n        }\n\n        \/\/ Validate the OAuth token if one was provided.\n        if ($token && !GitHubClient::validateToken($token)) {\n            $output->writeln('Invalid GitHub OAuth token <comment>\"' . $token . '\"<\/comment>.');\n            $output->writeln('');\n\n            return 1;\n        }\n\n        \/\/ Verify that a token is provided if --update-public-key is used.\n        $updateKey = $input->getOption('update-public-key');\n        if ($updateKey && !$token) {\n            $output->writeln('Can not update public key without --authorize or --auth-token.');\n            $output->writeln('');\n\n            return 1;\n        }\n\n        \/\/ Fetch the public key ...\n        $repoOwner    = $configReader->repositoryOwner();\n        $repoName     = $configReader->repositoryName();\n        $publicKey    = $this->travisConfigManager()->publicKeyCache($packageRoot);\n\n        if ($updateKey || ($token && null === $publicKey)) {\n            $output->writeln(\n                sprintf(\n                    'Fetching public key for <info>%s\/%s<\/info>.',\n                    $repoOwner,\n                    $repoName\n                )\n            );\n\n            try {\n                $publicKey = $this->travisClient()->publicKey($repoOwner, $repoName);\n            } catch (ReadException $e) {\n                throw new RuntimeException(\n                    sprintf(\n                        'Unable to retrieve the public key for repository %s\/%s. Check that the repository has been synced to Travis CI.',\n                        $repoOwner,\n                        $repoName\n                    )\n                );\n            }\n            $this->travisConfigManager()->setPublicKeyCache($packageRoot, $publicKey);\n        }\n\n        \/\/ Encrypt the new token ..\n        if ($token) {\n            $output->writeln('Encrypting OAuth token.');\n            $secureEnv = $this->travisClient()->encryptEnvironment($publicKey, $token);\n            $this->travisConfigManager()->setSecureEnvironmentCache($packageRoot, $secureEnv);\n        }\n\n        \/\/ Update the travis CI configuration ...\n        $artifacts = $this->travisConfigManager()->updateConfig(\n            $archerRoot,\n            $packageRoot\n        );\n\n        $output->writeln('Updated <info>.travis.yml<\/info>.');\n\n        if (!$artifacts) {\n            $output->writeln('<comment>Artifact publication is not available as no GitHub OAuth token has been configured.<\/comment>');\n        }\n\n        $output->writeln('Configuration updated successfully.');\n        $output->writeln('');\n    }\n\n    \/**\n     * @param string $username\n     * @param string $password\n     *\n     * @return string|null\n     *\/\n    protected function existingToken($username, $password)\n    {\n        $result = $this->executeWoodhouse(\n            $username,\n            $password,\n            array(\n                'github:list-auth',\n                '--name',\n                '\/^Archer$\/',\n                '--url',\n                '~^https:\/\/github\\.com\/IcecaveStudios\/archer$~',\n            )\n        );\n\n        return $this->parseAuthorization($result);\n    }\n\n    \/**\n     * @param string $username\n     * @param string $password\n     *\n     * @return string\n     *\/\n    protected function createToken($username, $password)\n    {\n        $result = $this->executeWoodhouse(\n            $username,\n            $password,\n            array(\n                'github:create-auth',\n                '--name',\n                'Archer',\n                '--url',\n                'https:\/\/github.com\/IcecaveStudios\/archer',\n            )\n        );\n\n        return $this->parseAuthorization($result);\n    }\n\n    \/**\n     * @param string $data\n     *\n     * @return string|null\n     *\/\n    protected function parseAuthorization($data)\n    {\n        if ('' === trim($data)) {\n            return null;\n        }\n\n        $pattern = '~^\\d+: ([0-9a-f]{40}) Archer \\(API\\) \\[([a-z, ]*)\\] https:\/\/github.com\/IcecaveStudios\/archer$~m';\n        if (preg_match_all($pattern, $data, $matches)) {\n            if (count($matches[0]) > 1) {\n                throw new RuntimeException(\n                    'Mutiple Archer GitHub authorizations found. Delete redundant authorizations before continuing.'\n                );\n            }\n\n            if ('repo' !== $matches[2][0]) {\n                throw new RuntimeException(\n                    sprintf(\n                        'Archer GitHub authorization has incorrect scope. Expected [repo], but actual token scope is [%s].',\n                        $matches[2][0]\n                    )\n                );\n            }\n\n            return $matches[1][0];\n        }\n\n        throw new RuntimeException('Unable to parse authorization token.');\n    }\n\n    \/**\n     * @param string        $username\n     * @param string        $password\n     * @param array<string> $arguments\n     *\n     * @return string\n     *\/\n    protected function executeWoodhouse($username, $password, array $arguments)\n    {\n        array_unshift(\n            $arguments,\n            sprintf('%s\/bin\/woodhouse', $this->getApplication()->packageRoot())\n        );\n        $arguments[] = '--username';\n        $arguments[] = $username;\n        $arguments[] = '--password';\n        $arguments[] = $password;\n\n        $process = $this->processFactory()->createFromArray($arguments);\n        $process->run();\n        if (!$process->isSuccessful()) {\n            throw new RuntimeException(\n                sprintf(\n                    'Failed to execute authorization management command (%s).',\n                    $arguments[1]\n                )\n            );\n        }\n\n        return $process->getOutput();\n    }\n\n    \/**\n     * @param InputInterface  $input\n     * @param OutputInterface $output\n     *\n     * @return tuple<string,string>\n     *\/\n    protected function credentials(InputInterface $input, OutputInterface $output)\n    {\n        if (null === $this->credentials) {\n            $username = $input->getOption('username');\n            $password = $input->getOption('password');\n            if ($input->isInteractive()) {\n                if (null === $username) {\n                    $username = $this->getHelperSet()->get('dialog')->ask($output, 'Username: ');\n                }\n                if (null === $password) {\n                    $password = $this->getHelperSet()->get('hidden-input')->askHiddenResponse($output, 'Password: ');\n                }\n            }\n\n            $this->credentials = array($username, $password);\n        }\n\n        return $this->credentials;\n    }\n\n    private $dotFilesManager;\n    private $configReaderFactory;\n    private $travisClient;\n    private $travisConfigManager;\n    private $processFactory;\n    private $credentials;\n    private $isolator;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,41,41,null,41,41,null,41,41,null,41,41,null,41,41,null,null,41,41,41,41,41,null,41,41,null,null,null,null,null,null,18,null,null,null,null,null,null,null,18,null,null,null,null,null,null,null,9,null,null,null,null,null,null,null,11,null,null,null,null,null,null,null,9,null,null,null,null,41,41,null,41,41,41,41,null,41,null,41,41,41,41,null,41,41,41,41,41,null,41,41,41,41,41,null,41,41,41,41,41,null,41,41,41,41,41,null,41,41,null,null,null,null,null,null,null,null,null,16,16,null,null,16,16,16,null,16,null,16,null,null,16,1,null,null,null,15,15,7,7,null,7,3,1,1,null,1,1,2,null,null,null,null,11,1,1,null,1,null,null,null,10,10,1,1,null,1,null,null,null,9,9,9,null,9,6,6,6,6,null,6,6,null,null,6,6,1,1,1,1,null,1,1,null,5,null,null,null,8,6,6,6,null,null,null,8,8,null,8,null,8,null,8,1,null,null,8,8,8,null,null,null,null,null,null,null,null,null,7,7,7,null,7,7,7,7,7,null,7,null,6,null,null,null,null,null,null,null,null,null,null,1,1,1,null,1,1,1,1,1,null,1,null,1,null,null,null,null,null,null,null,null,null,6,1,null,null,6,6,5,1,null,1,null,null,4,1,1,1,1,1,1,null,null,3,null,null,1,null,null,null,null,null,null,null,null,null,null,null,7,7,7,7,7,7,7,7,null,7,7,7,1,1,1,1,1,1,null,null,6,null,null,null,null,null,null,null,null,null,null,7,7,7,7,7,1,null,7,1,null,null,null,7,null,null,7,null,null,null,null,null,null,null,null,null,null]},{"name":"Console\/Helper\/HiddenInputHelper.php","source":"<?php\nnamespace Icecave\\Archer\\Console\\Helper;\n\nuse ErrorException;\nuse Icecave\\Archer\\Support\\Isolator;\nuse RuntimeException;\nuse Symfony\\Component\\Console\\Helper\\Helper;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nclass HiddenInputHelper extends Helper\n{\n    \/**\n     * @param string|null   $hiddenInputPath\n     * @param Isolator|null $isolator\n     *\/\n    public function __construct($hiddenInputPath = null, Isolator $isolator = null)\n    {\n        if (null === $hiddenInputPath) {\n            $hiddenInputPath = __DIR__ . '\/..\/..\/..\/res\/bin\/hiddeninput.exe';\n        }\n\n        $this->hiddenInputPath = $hiddenInputPath;\n        $this->isolator = Isolator::get($isolator);\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function getName()\n    {\n        return 'hidden-input';\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function hiddenInputPath()\n    {\n        return $this->hiddenInputPath;\n    }\n\n    \/**\n     * @param OutputInterface $output\n     * @param string|array    $question\n     *\n     * @return string\n     *\/\n    public function askHiddenResponse(OutputInterface $output, $question)\n    {\n        if ($this->isolator->defined('PHP_WINDOWS_VERSION_BUILD')) {\n            return $this->askHiddenResponseWindows($output, $question);\n        }\n\n        return $this->askHiddenResponseStty($output, $question);\n    }\n\n    \/**\n     * @param OutputInterface $output\n     * @param string|array    $question\n     *\n     * @return string\n     *\/\n    protected function askHiddenResponseWindows(OutputInterface $output, $question)\n    {\n        $output->write($question);\n        $value = rtrim(\n            $this->execute($this->hiddenInputRealPath()),\n            \"\\r\\n\"\n        );\n        $output->writeln('');\n\n        return $value;\n    }\n\n    \/**\n     * @param OutputInterface $output\n     * @param string|array    $question\n     *\n     * @return string\n     *\/\n    protected function askHiddenResponseStty(OutputInterface $output, $question)\n    {\n        $output->write($question);\n\n        $sttyMode = $this->execute('stty -g');\n        $this->execute('stty -echo');\n\n        $error = null;\n\n        try {\n            $value = rtrim(\n                $this->isolator->fgets(STDIN),\n                \"\\r\\n\"\n            );\n        } catch (ErrorException $error) {\n            \/\/ reset stty before throwing\n        }\n\n        $this->execute(sprintf('stty %s', $sttyMode));\n        if (null !== $error) {\n            throw new RuntimeException('Unable to read response.', 0, $error);\n        }\n        $output->writeln('');\n\n        return $value;\n    }\n\n    \/**\n     * @return string\n     *\/\n    protected function hiddenInputRealPath()\n    {\n        if (null === $this->hiddenInputRealPath) {\n            $this->hiddenInputRealPath = sprintf(\n                '%s\/hiddeninput-%s.exe',\n                $this->isolator->sys_get_temp_dir(),\n                $this->isolator->uniqid()\n            );\n            $this->isolator->copy(\n                $this->hiddenInputPath(),\n                $this->hiddenInputRealPath\n            );\n        }\n\n        return $this->hiddenInputRealPath;\n    }\n\n    \/**\n     * @param string $command\n     *\n     * @return string\n     *\/\n    protected function execute($command)\n    {\n        $result = $this->isolator->shell_exec($command);\n        if (false === $result) {\n            throw new RuntimeException('Unable to create or read hidden input dialog.');\n        }\n\n        return $result;\n    }\n\n    private $hiddenInputPath;\n    private $hiddenInputRealPath;\n    private $isolator;\n    private $hasSttyAvailable;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,48,42,null,null,48,48,48,null,null,null,null,null,null,42,null,null,null,null,null,null,null,4,null,null,null,null,null,null,null,null,null,null,5,2,null,null,3,null,null,null,null,null,null,null,null,null,null,2,2,2,null,1,1,null,1,null,null,null,null,null,null,null,null,null,null,3,null,3,2,null,2,null,null,2,2,null,1,2,null,null,null,2,2,1,null,1,null,1,null,null,null,null,null,null,null,2,2,2,2,2,2,2,2,2,2,null,null,2,null,null,null,null,null,null,null,null,null,5,5,2,null,null,3,null,null,null,null,null,null,null]},{"name":"Coveralls\/CoverallsClient.php","source":"<?php\nnamespace Icecave\\Archer\\Coveralls;\n\nuse ErrorException;\nuse Icecave\\Archer\\Support\\Isolator;\n\nclass CoverallsClient\n{\n    \/**\n     * @param Isolator|null $isolator\n     *\/\n    public function __construct(Isolator $isolator = null)\n    {\n        $this->isolator = Isolator::get($isolator);\n    }\n\n    \/**\n     * @param string $repoOwner\n     * @param string $repoName\n     *\n     * @return string\n     *\/\n    public function exists($repoOwner, $repoName)\n    {\n        $uri = sprintf(\n            'https:\/\/coveralls.io\/r\/%s\/%s.json',\n            urlencode($repoOwner),\n            urlencode($repoName)\n        );\n\n        try {\n            $response = $this->isolator->file_get_contents($uri);\n        } catch (ErrorException $e) {\n            return false;\n        }\n\n        $this->isolator->json_decode($response);\n        if (JSON_ERROR_NONE !== $this->isolator->json_last_error()) {\n            return false;\n        }\n\n        return true;\n    }\n\n    private $isolator;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,44,44,null,null,null,null,null,null,null,null,null,3,3,3,3,3,null,null,3,3,1,null,null,2,2,1,null,null,1,null,null,null,null]},{"name":"Documentation\/DocumentationGenerator.php","source":"<?php\nnamespace Icecave\\Archer\\Documentation;\n\nuse Icecave\\Archer\\Configuration\\ComposerConfigurationReader;\nuse Icecave\\Archer\\Support\\Isolator;\nuse Icecave\\Archer\\FileSystem\\FileSystem;\nuse RuntimeException;\nuse Sami\\Sami;\nuse stdClass;\nuse Symfony\\Component\\Finder\\Finder;\n\nclass DocumentationGenerator\n{\n    \/**\n     * @param FileSystem|null                  $fileSystem\n     * @param ComposerConfigurationReader|null $composerConfigReader\n     * @param Isolator|null                    $isolator\n     *\/\n    public function __construct(\n        FileSystem $fileSystem = null,\n        ComposerConfigurationReader $composerConfigReader = null,\n        Isolator $isolator = null\n    ) {\n        $this->isolator = Isolator::get($isolator);\n\n        if (null === $fileSystem) {\n            $fileSystem = new FileSystem($this->isolator);\n        }\n        if (null === $composerConfigReader) {\n            $composerConfigReader = new ComposerConfigurationReader(\n                $fileSystem,\n                $this->isolator\n            );\n        }\n\n        $this->fileSystem = $fileSystem;\n        $this->composerConfigReader = $composerConfigReader;\n    }\n\n    \/**\n     * @return FileSystem\n     *\/\n    public function fileSystem()\n    {\n        return $this->fileSystem;\n    }\n\n    \/**\n     * @return ComposerConfigurationReader\n     *\/\n    public function composerConfigReader()\n    {\n        return $this->composerConfigReader;\n    }\n\n    \/**\n     * @param string|null $projectPath\n     *\/\n    public function generate($projectPath = null)\n    {\n        if (null === $projectPath) {\n            $projectPath = '.';\n        }\n\n        $composerConfiguration = $this->composerConfigReader()->read(\n            $projectPath\n        );\n        $buildPath = sprintf('%s\/artifacts\/documentation\/api', $projectPath);\n        $cachePath = sprintf(\n            '%s\/%s',\n            $this->isolator->sys_get_temp_dir(),\n            $this->isolator->uniqid('archer-sami-cache-', true)\n        );\n\n        $sami = $this->createSami(\n            $this->createFinder($this->sourcePath($projectPath)),\n            array(\n                'title' => sprintf(\n                    '%s API',\n                    $this->projectName($composerConfiguration)\n                ),\n                'default_opened_level' => $this->openedLevel(\n                    $composerConfiguration\n                ),\n                'build_dir' => $buildPath,\n                'cache_dir' => $cachePath,\n            )\n        );\n\n        if ($this->fileSystem()->directoryExists($buildPath)) {\n            $this->fileSystem()->delete($buildPath);\n        }\n\n        $handlers = $this->popErrorHandlers();\n        $sami['project']->update();\n        $this->pushErrorHandlers($handlers);\n\n        $this->fileSystem()->delete($cachePath);\n    }\n\n    \/**\n     * @param string $projectPath\n     *\n     * @return string\n     *\/\n    protected function sourcePath($projectPath)\n    {\n        return sprintf('%s\/src', $projectPath);\n    }\n\n    \/**\n     * @param stdClass $composerConfiguration\n     *\n     * @return string\n     *\/\n    protected function projectName(stdClass $composerConfiguration)\n    {\n        $primaryNamespace = $this->primaryNamespace($composerConfiguration);\n\n        if (null !== $primaryNamespace) {\n            $namespaceAtoms = explode('\\\\', $primaryNamespace);\n\n            if (count($namespaceAtoms) > 1) {\n                array_shift($namespaceAtoms);\n            }\n\n            return implode(' - ', $namespaceAtoms);\n        }\n\n        if (!property_exists($composerConfiguration, 'name')) {\n            throw new RuntimeException(\n                'No project name set in Composer configuration.'\n            );\n        }\n\n        return $composerConfiguration->name;\n    }\n\n    \/**\n     * @param stdClass $composerConfiguration\n     *\n     * @return string\n     *\/\n    protected function openedLevel(stdClass $composerConfiguration)\n    {\n        $openedLevel = 2;\n        $primaryNamespace = $this->primaryNamespace($composerConfiguration);\n\n        if (null !== $primaryNamespace) {\n            $openedLevel = substr_count($primaryNamespace, '\\\\') + 1;\n        }\n\n        return $openedLevel;\n    }\n\n    \/**\n     * @param stdClass $composerConfiguration\n     *\n     * @return string|null\n     *\/\n    protected function primaryNamespace(stdClass $composerConfiguration)\n    {\n        if (\n            property_exists($composerConfiguration, 'autoload') &&\n            property_exists($composerConfiguration->autoload, 'psr-0')\n        ) {\n            $psr0Autoload = get_object_vars(\n                $composerConfiguration->autoload->{'psr-0'}\n            );\n            foreach ($psr0Autoload as $namespace => $path) {\n                if ('_empty_' === $namespace) {\n                    $namespace = null;\n                }\n\n                return $namespace;\n            }\n        }\n\n        return null;\n    }\n\n    \/**\n     * @param string $sourcePath\n     *\n     * @return Finder\n     *\/\n    protected function createFinder($sourcePath)\n    {\n        return Finder::create()->in($sourcePath);\n    }\n\n    \/**\n     * @param Finder              $finder\n     * @param array<string,mixed> $options\n     *\n     * @return Sami\n     *\/\n    protected function createSami(Finder $finder, array $options)\n    {\n        return new Sami($finder, $options);\n    }\n\n    \/**\n     * @return array<callable>\n     *\/\n    protected function popErrorHandlers()\n    {\n        $handlers = array();\n\n        $handler = $this->isolator->set_error_handler(function () {});\n        $this->isolator->restore_error_handler();\n        $this->isolator->restore_error_handler();\n\n        while (null !== $handler) {\n            $handlers[] = $handler;\n            $handler = $this->isolator->set_error_handler(function () {});\n            $this->isolator->restore_error_handler();\n            $this->isolator->restore_error_handler();\n        }\n\n        return $handlers;\n    }\n\n    \/**\n     * @param array<callable> $handlers\n     *\/\n    protected function pushErrorHandlers(array $handlers)\n    {\n        foreach (array_reverse($handlers) as $handler) {\n            $this->isolator->set_error_handler($handler);\n        }\n    }\n\n    private $fileSystem;\n    private $composerConfigReader;\n    private $isolator;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,59,null,59,43,null,59,43,43,43,43,null,null,59,59,59,null,null,null,null,null,null,5,null,null,null,null,null,null,null,5,null,null,null,null,null,null,null,4,1,null,null,4,null,3,3,4,3,3,3,4,null,3,3,1,3,3,3,4,3,null,3,4,3,null,3,null,3,2,null,null,3,3,3,null,3,3,null,null,null,null,null,null,null,null,1,1,null,null,null,null,null,null,null,null,6,null,6,4,null,5,3,null,null,4,null,null,3,1,null,1,null,null,1,null,null,null,null,null,null,null,null,1,8,8,null,7,5,null,null,8,null,null,null,null,null,null,null,null,null,null,10,7,7,7,7,7,7,6,1,null,null,6,1,null,null,4,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,4,null,null,4,4,null,4,1,null,1,1,1,null,4,null,null,null,null,null,null,null,4,1,4,4,null,null,null,null,null]},{"name":"FileSystem\/Exception\/ReadException.php","source":"<?php\nnamespace Icecave\\Archer\\FileSystem\\Exception;\n\nuse Exception;\nuse RuntimeException;\n\nfinal class ReadException extends RuntimeException\n{\n    \/**\n     * @param string         $path\n     * @param Exception|null $previous\n     *\/\n    public function __construct($path, Exception $previous = null)\n    {\n        $this->path = $path;\n\n        parent::__construct(\n            sprintf(\"Unable to read from '%s'.\", $path),\n            0,\n            $previous\n        );\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function path()\n    {\n        return $this->path;\n    }\n\n    private $path;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,11,null,11,11,11,null,11,11,null,null,null,null,null,null,1,null,null,null,null]},{"name":"FileSystem\/Exception\/WriteException.php","source":"<?php\nnamespace Icecave\\Archer\\FileSystem\\Exception;\n\nuse Exception;\nuse RuntimeException;\n\nfinal class WriteException extends RuntimeException\n{\n    \/**\n     * @param string         $path\n     * @param Exception|null $previous\n     *\/\n    public function __construct($path, Exception $previous = null)\n    {\n        $this->path = $path;\n\n        parent::__construct(\n            sprintf(\"Unable to write to '%s'.\", $path),\n            0,\n            $previous\n        );\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function path()\n    {\n        return $this->path;\n    }\n\n    private $path;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,8,null,8,8,8,null,8,8,null,null,null,null,null,null,1,null,null,null,null]},{"name":"FileSystem\/FileSystem.php","source":"<?php\nnamespace Icecave\\Archer\\FileSystem;\n\nuse ErrorException;\nuse Icecave\\Archer\\Support\\Isolator;\n\nclass FileSystem\n{\n    \/**\n     * @param Isolator|null $isolator\n     *\/\n    public function __construct(Isolator $isolator = null)\n    {\n        $this->isolator = Isolator::get($isolator);\n    }\n\n    \/**\n     * @param string $path\n     *\n     * @return boolean\n     *\/\n    public function exists($path)\n    {\n        try {\n            $exists = $this->isolator->file_exists($path);\n        } catch (ErrorException $e) {\n            throw new Exception\\ReadException($path, $e);\n        }\n\n        return $exists;\n    }\n\n    \/**\n     * @param string $path\n     *\n     * @return boolean\n     *\/\n    public function fileExists($path)\n    {\n        try {\n            $exists = $this->isolator->is_file($path);\n        } catch (ErrorException $e) {\n            throw new Exception\\ReadException($path, $e);\n        }\n\n        return $exists;\n    }\n\n    \/**\n     * @param string $path\n     *\n     * @return boolean\n     *\/\n    public function directoryExists($path)\n    {\n        try {\n            $exists = $this->isolator->is_dir($path);\n        } catch (ErrorException $e) {\n            throw new Exception\\ReadException($path, $e);\n        }\n\n        return $exists;\n    }\n\n    \/**\n     * @param string $path\n     *\n     * @return string\n     *\/\n    public function read($path)\n    {\n        try {\n            $content = $this->isolator->file_get_contents($path);\n        } catch (ErrorException $e) {\n            throw new Exception\\ReadException($path, $e);\n        }\n\n        return $content;\n    }\n\n    \/**\n     * @param string $path\n     *\n     * @return array<string>\n     *\/\n    public function listPaths($path)\n    {\n        try {\n            $rawItems = $this->isolator->scandir($path);\n        } catch (ErrorException $e) {\n            throw new Exception\\ReadException($path, $e);\n        }\n\n        $items = array();\n        foreach ($rawItems as $item) {\n            if ('.' !== $item && '..' !== $item) {\n                $items[] = $item;\n            }\n        }\n\n        return $items;\n    }\n\n    \/**\n     * @param string $path\n     * @param string $content\n     *\/\n    public function write($path, $content)\n    {\n        $this->ensureParentDirectory($path);\n\n        try {\n            $this->isolator->file_put_contents($path, $content);\n        } catch (ErrorException $e) {\n            throw new Exception\\WriteException($path, $e);\n        }\n    }\n\n    \/**\n     * @param string $source\n     * @param string $destination\n     *\/\n    public function copy($source, $destination)\n    {\n        $this->ensureParentDirectory($destination);\n\n        try {\n            $this->isolator->copy($source, $destination);\n        } catch (ErrorException $e) {\n            throw new Exception\\WriteException($destination, $e);\n        }\n    }\n\n    \/**\n     * @param string $source\n     * @param string $destination\n     *\/\n    public function move($source, $destination)\n    {\n        $this->ensureParentDirectory($destination);\n\n        try {\n            $this->isolator->rename($source, $destination);\n        } catch (ErrorException $e) {\n            throw new Exception\\WriteException($destination, $e);\n        }\n    }\n\n    \/**\n     * @param string $path\n     *\/\n    public function createDirectory($path)\n    {\n        try {\n            $this->isolator->mkdir($path, 0777, true);\n        } catch (ErrorException $e) {\n            throw new Exception\\WriteException($path, $e);\n        }\n    }\n\n    \/**\n     * @param string  $path\n     * @param integer $mode\n     *\/\n    public function chmod($path, $mode)\n    {\n        try {\n            $this->isolator->chmod($path, $mode);\n        } catch (ErrorException $e) {\n            throw new Exception\\WriteException($path, $e);\n        }\n    }\n\n    \/**\n     * @param string $path\n     *\/\n    public function delete($path)\n    {\n        if ($this->directoryExists($path)) {\n            foreach ($this->listPaths($path) as $subPath) {\n                $this->delete(sprintf('%s\/%s', $path, $subPath));\n            }\n\n            try {\n                $this->isolator->rmdir($path);\n            } catch (ErrorException $e) {\n                throw new Exception\\WriteException($path, $e);\n            }\n        } else {\n            try {\n                $this->isolator->unlink($path);\n            } catch (ErrorException $e) {\n                throw new Exception\\WriteException($path, $e);\n            }\n        }\n    }\n\n    \/**\n     * @param string $path\n     *\/\n    protected function ensureParentDirectory($path)\n    {\n        try {\n            $parentPath = $this->isolator->dirname($path);\n        } catch (ErrorException $e) {\n            throw new Exception\\ReadException($path, $e);\n        }\n\n        if (!$this->directoryExists($parentPath)) {\n            $this->createDirectory($parentPath);\n        }\n    }\n\n    private $isolator;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,80,80,null,null,null,null,null,null,null,null,null,2,2,1,null,null,1,null,null,null,null,null,null,null,null,null,null,2,2,1,null,null,1,null,null,null,null,null,null,null,null,null,null,15,15,1,null,null,14,null,null,null,null,null,null,null,null,null,null,2,2,1,null,null,1,null,null,null,null,null,null,null,null,null,null,4,4,1,null,null,3,3,3,2,null,3,null,3,null,null,null,null,null,null,null,null,4,null,null,3,3,1,null,2,null,null,null,null,null,null,null,4,null,null,3,3,1,null,2,null,null,null,null,null,null,null,4,null,null,3,3,1,null,2,null,null,null,null,null,null,null,5,5,1,null,4,null,null,null,null,null,null,null,null,2,2,1,null,1,null,null,null,null,null,null,4,2,1,2,null,null,2,2,1,null,null,null,3,3,1,null,null,2,null,null,null,null,null,null,null,12,12,3,null,null,9,3,null,9,null,null,null]},{"name":"Git\/GitConfigReader.php","source":"<?php\nnamespace Icecave\\Archer\\Git;\n\nuse RuntimeException;\nuse Icecave\\Archer\\Process\\ProcessFactory;\n\nclass GitConfigReader\n{\n    \/**\n     * @param string              $repositoryPath\n     * @param ProcessFactory|null $processFactory\n     *\/\n    public function __construct(\n        $repositoryPath,\n        ProcessFactory $processFactory = null\n    ) {\n        if (null === $processFactory) {\n            $processFactory = new ProcessFactory;\n        }\n\n        $this->repositoryPath = $repositoryPath;\n        $this->processFactory = $processFactory;\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function repositoryPath()\n    {\n        return $this->repositoryPath;\n    }\n\n    \/**\n     * @return ProcessFactory\n     *\/\n    public function processFactory()\n    {\n        return $this->processFactory;\n    }\n\n    \/**\n     * @param string $key\n     * @param mixed  $default\n     *\n     * @return mixed\n     *\/\n    public function get($key, $default = null)\n    {\n        $this->parse();\n        if (array_key_exists($key, $this->config)) {\n            return $this->config[$key];\n        }\n\n        return $default;\n    }\n\n    \/**\n     * @return boolean\n     *\/\n    public function isGitHubRepository()\n    {\n        return 0 !== preg_match(\n            self::GITHUB_URL_PATTERN,\n            $this->get('remote.origin.url', '')\n        );\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function repositoryOwner()\n    {\n        list($owner, $name) = $this->parseOriginRepositoryUrl();\n\n        return $owner;\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function repositoryName()\n    {\n        list($owner, $name) = $this->parseOriginRepositoryUrl();\n\n        return $name;\n    }\n\n    \/**\n     * @return tuple<string,string>\n     *\/\n    protected function parseOriginRepositoryUrl()\n    {\n        $url = $this->get('remote.origin.url', '');\n        if (!preg_match(self::GITHUB_URL_PATTERN, $url, $matches)) {\n            throw new RuntimeException('Origin URL \"' . $url . '\" is not a GitHub repository.');\n        }\n\n        return array($matches[1], $matches[2]);\n    }\n\n    protected function parse()\n    {\n        if (null !== $this->config) {\n            return;\n        }\n\n        $config = array();\n        $process = $this->processFactory()->create('git', 'config', '--list');\n        $process->setWorkingDirectory($this->repositoryPath());\n        $process->run();\n        if (!$process->isSuccessful()) {\n            throw new RuntimeException(\n                sprintf(\n                    'Unable to read git configuration: %s',\n                    $process->getErrorOutput()\n                )\n            );\n        }\n\n        if (preg_match_all('\/^([^=]*)=(.*)$\/m', $process->getOutput(), $matches)) {\n            foreach ($matches[1] as $index => $key) {\n                $config[$key] = $matches[2][$index];\n            }\n        }\n\n        $this->config = $config;\n    }\n\n    const GITHUB_URL_PATTERN = '{github.com[\/:](.+?)\/(.+?).git$}i';\n\n    private $repositoryPath;\n    private $processFactory;\n    private $config;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,11,2,null,null,11,11,11,null,null,null,null,null,null,9,null,null,null,null,null,null,null,10,null,null,null,null,null,null,null,null,null,null,8,7,7,null,null,1,null,null,null,null,null,null,null,2,2,2,2,null,null,null,null,null,null,null,2,null,1,null,null,null,null,null,null,null,2,null,1,null,null,null,null,null,null,null,4,4,2,null,null,2,null,null,null,null,8,1,null,null,8,8,8,8,8,1,1,1,1,1,1,null,null,7,7,7,7,null,null,7,7,null,null,null,null,null,null,null]},{"name":"Git\/GitConfigReaderFactory.php","source":"<?php\nnamespace Icecave\\Archer\\Git;\n\nclass GitConfigReaderFactory\n{\n    \/**\n     * @param string $repositoryPath\n     *\n     * @return GitConfigReader\n     *\/\n    public function create($repositoryPath)\n    {\n        return new GitConfigReader($repositoryPath);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,1,null,null]},{"name":"Git\/GitDotFilesManager.php","source":"<?php\nnamespace Icecave\\Archer\\Git;\n\nuse Icecave\\Archer\\FileSystem\\FileSystem;\n\nclass GitDotFilesManager\n{\n    \/**\n     * @param FileSystem|null $fileSystem\n     * @param Isolator|null   $isolator\n     *\/\n    public function __construct(FileSystem $fileSystem = null)\n    {\n        if (null === $fileSystem) {\n            $fileSystem = new FileSystem;\n        }\n\n        $this->fileSystem = $fileSystem;\n    }\n\n    \/**\n     * @return FileSystem\n     *\/\n    public function fileSystem()\n    {\n        return $this->fileSystem;\n    }\n\n    \/**\n     * @param string $archerPackageRoot\n     * @param string $packageRoot\n     *\n     * @return array<string, boolean>\n     *\/\n    public function updateDotFiles($archerPackageRoot, $packageRoot)\n    {\n        $files = array(\n            '.gitignore'     => false,\n            '.gitattributes' => false\n        );\n\n        foreach ($files as $filename => $updated) {\n            $targetPath = sprintf('%s\/%s', $packageRoot, $filename);\n            $sourcePath = sprintf('%s\/res\/git\/%s', $archerPackageRoot, substr($filename, 1));\n\n            if ($this->fileSystem->fileExists($targetPath)) {\n                $existing = $this->fileSystem->read($targetPath);\n            } else {\n                $existing = '';\n            }\n\n            $content = $this->replaceContent(\n                $existing,\n                $this->fileSystem->read($sourcePath)\n            );\n\n            if ($existing !== $content) {\n                $files[$filename] = true;\n                $this->fileSystem->write($targetPath, $content);\n            }\n        }\n\n        return $files;\n    }\n\n    protected function replaceContent($existing, $source)\n    {\n        $start = '# archer start';\n        $end   = '# archer end';\n\n        $existing = trim($existing);\n        $source   = trim($source);\n        $enclosed = $start . PHP_EOL\n                . $source . PHP_EOL\n                . $end . PHP_EOL;\n\n        \/\/ The existing content is exactly the same as the resource\n        \/\/ content so just wrap it in the start\/end tags ...\n        if ($existing === $source) {\n            return $enclosed;\n        }\n\n        $sourceBlock = false;\n        $replaced = false;\n        $output = '';\n\n        foreach (explode(PHP_EOL, $existing) as $line) {\n            $line = trim($line);\n\n            \/\/ Start of the tagged source block within the existing content ...\n            if ($line === $start) {\n                $sourceBlock = true;\n                $replaced = true;\n                $output .= $enclosed;\n\n            \/\/ End of the tagged source block ...\n            } elseif ($line === $end) {\n                $sourceBlock = false;\n\n            \/\/ An un-managed custom line, include unchanged ...\n            } elseif (!$sourceBlock) {\n                $output .= $line . PHP_EOL;\n            }\n        }\n\n        \/\/ There was no tagged source block in the existing content\n        \/\/ so it is just appended to the existing content ...\n        if (!$replaced) {\n            $output .= PHP_EOL . $enclosed;\n        }\n\n        return trim($output) . PHP_EOL;\n    }\n\n    private $fileSystem;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,48,42,null,null,48,48,null,null,null,null,null,null,2,null,null,null,null,null,null,null,null,null,null,null,5,null,5,null,5,5,5,null,5,4,4,5,null,null,5,5,5,5,null,5,5,5,null,5,null,5,null,null,null,null,5,5,null,5,5,null,5,5,null,null,null,5,1,null,null,5,5,5,null,5,5,null,null,5,2,2,2,null,null,5,2,null,null,5,5,null,5,null,null,null,5,5,null,null,5,null,null,null,null]},{"name":"GitHub\/GitHubClient.php","source":"<?php\nnamespace Icecave\\Archer\\GitHub;\n\nuse Icecave\\Archer\\Support\\Isolator;\nuse InvalidArgumentException;\n\nclass GitHubClient\n{\n    \/**\n     * @param Isolator|null $isolator\n     *\/\n    public function __construct(Isolator $isolator = null)\n    {\n        $this->isolator = Isolator::get($isolator);\n    }\n\n    \/**\n     * @param string $token\n     *\n     * @return boolean True if $token is a well-formed GitHub API token; otherwise, false.\n     *\/\n    public static function validateToken($token)\n    {\n        return preg_match('\/^[0-9a-f]{40}$\/i', $token) === 1;\n    }\n\n    \/**\n     * @param string $repoOwner\n     * @param string $repoName\n     *\n     * @return string\n     *\/\n    public function defaultBranch($repoOwner, $repoName)\n    {\n        $response = $this->apiGet('repos\/%s\/%s', $repoOwner, $repoName);\n\n        \/\/ Planned change to GitHub API, rename master_branch => default_branch.\n        if (isset($response->default_branch)) {\n            return $response->default_branch;\n        } elseif (isset($response->master_branch)) {\n            return $response->master_branch;\n        } else {\n            return 'master';\n        }\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function authToken()\n    {\n        return $this->authToken;\n    }\n\n    \/**\n     * @param string $authToken\n     *\/\n    public function setAuthToken($authToken)\n    {\n        if (!self::validateToken($authToken)) {\n            throw new InvalidArgumentException('Invalid auth token.');\n        }\n\n        $this->authToken = $authToken;\n    }\n\n    \/**\n     * @return string|null\n     *\/\n    public function userAgent()\n    {\n        return $this->userAgent;\n    }\n\n    \/**\n     * @param string|null $userAgent\n     *\/\n    public function setUserAgent($userAgent)\n    {\n        $this->userAgent = $userAgent;\n    }\n\n    public function apiGet($resource)\n    {\n        $url = vsprintf(\n            'https:\/\/api.github.com\/' . $resource,\n            array_slice(func_get_args(), 1)\n        );\n\n        $options = array();\n\n        if (null !== $this->authToken) {\n            $options['header'] = sprintf('Authorization: token %s', $this->authToken);\n        }\n\n        if (null !== $this->userAgent) {\n            $options['user_agent'] = $this->userAgent;\n        }\n\n        if (empty($options)) {\n            $context = null;\n        } else {\n            $context = $this->isolator->stream_context_create(\n                array('http' => $options)\n            );\n        }\n\n        $response = $this->isolator->file_get_contents($url, false, $context);\n\n        return json_decode($response);\n    }\n\n    private $authToken;\n    private $userAgent;\n    private $isolator;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,51,51,null,null,null,null,null,null,null,null,12,null,null,null,null,null,null,null,null,null,null,3,null,null,3,1,2,1,null,1,null,null,null,null,null,null,null,null,2,null,null,null,null,null,null,null,3,1,null,null,2,2,null,null,null,null,null,null,1,null,null,null,null,null,null,null,43,43,null,null,null,3,3,3,3,null,3,null,3,1,null,null,3,1,null,null,3,1,1,2,2,2,null,null,3,null,3,null,null,null,null,null,null]},{"name":"Process\/PHPUnitExecutableFinder.php","source":"<?php\nnamespace Icecave\\Archer\\Process;\n\nuse RuntimeException;\nuse Symfony\\Component\\Process\\ExecutableFinder;\n\nclass PHPUnitExecutableFinder\n{\n    \/**\n     * @param ExecutableFinder|null $executableFinder\n     * @param ProcessFactory|null   $processFactory\n     *\/\n    public function __construct(\n        ExecutableFinder $executableFinder = null,\n        ProcessFactory $processFactory = null\n    ) {\n        if (null === $executableFinder) {\n            $executableFinder = new ExecutableFinder;\n        }\n        if (null === $processFactory) {\n            $processFactory = new ProcessFactory;\n        }\n\n        $this->executableFinder = $executableFinder;\n        $this->processFactory = $processFactory;\n    }\n\n    \/**\n     * @return ExecutableFinder\n     *\/\n    public function executableFinder()\n    {\n        return $this->executableFinder;\n    }\n\n    \/**\n     * @return ProcessFactory\n     *\/\n    public function processFactory()\n    {\n        return $this->processFactory;\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function find()\n    {\n        if ($this->environmentIsTravis()) {\n            return $this->findForTravis();\n        }\n\n        return $this->findForGeneric();\n    }\n\n    \/**\n     * @return string\n     *\/\n    protected function findForGeneric()\n    {\n        $phpunit = $this->executableFinder()->find('phpunit');\n        if (null === $phpunit) {\n            throw new RuntimeException('Unable to find PHPUnit executable.');\n        }\n\n        return $phpunit;\n    }\n\n    \/**\n     * @return string\n     *\/\n    protected function findForTravis()\n    {\n        $process = $this->processFactory()->create('rbenv', 'which', 'phpunit');\n        $process->run();\n        if (!$process->isSuccessful()) {\n            throw new RuntimeException(\n                sprintf(\n                    'Unable to find PHPUnit executable: %s',\n                    $process->getErrorOutput()\n                )\n            );\n        }\n\n        return trim($process->getOutput());\n    }\n\n    \/**\n     * @return boolean\n     *\/\n    protected function environmentIsTravis()\n    {\n        if (array_key_exists('TRAVIS', $_SERVER)) {\n            return 'true' === $_SERVER['TRAVIS'];\n        }\n\n        return false;\n    }\n\n    private $executableFinder;\n    private $processFactory;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,48,43,null,48,43,null,null,48,48,48,null,null,null,null,null,null,4,null,null,null,null,null,null,null,4,null,null,null,null,null,null,null,4,2,null,null,2,null,null,null,null,null,null,null,2,2,1,null,null,1,null,null,null,null,null,null,null,2,2,2,1,1,1,1,1,1,null,null,1,null,null,null,null,null,null,null,4,2,null,null,2,null,null,null,null,null]},{"name":"Process\/ProcessFactory.php","source":"<?php\nnamespace Icecave\\Archer\\Process;\n\nuse Symfony\\Component\\Process\\Process;\n\nclass ProcessFactory\n{\n    \/**\n     * @param string $executablePath\n     * @param string $argument,...\n     *\n     * @return Process\n     *\/\n    public function create($executablePath)\n    {\n        return static::createFromArray(func_get_args());\n    }\n\n    \/**\n     * @param array<string> $arguments\n     *\n     * @return Process\n     *\/\n    public function createFromArray(array $arguments)\n    {\n        return new Process(\n            implode(' ', array_map('escapeshellarg', $arguments))\n        );\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,1,1,1,null,null]},{"name":"Support\/Asplode.php","source":"<?php\nnamespace Icecave\\Archer\\Support;\n\nuse ErrorException;\nuse RuntimeException;\n\n\/**\n * This class is a partial implementation of eloquent\/asplode, provided here to prevent\n * circular dependencies and namespace clashes.\n *\n * Please see https:\/\/github.com\/eloquent\/asplode for a usable implementation.\n *\/\nclass Asplode\n{\n    \/**\n     * @return Asplode\n     *\/\n    public static function instance()\n    {\n        return new static;\n    }\n\n    public function __construct(Isolator $isolator = null)\n    {\n        $this->isolator = Isolator::get($isolator);\n    }\n\n    public function install()\n    {\n        if ($this->installed) {\n            throw new RuntimeException('Already installed.');\n        }\n        if (0 === $this->isolator->error_reporting()) {\n            throw new RuntimeException('Error reporting misconfigured.');\n        }\n\n        $this->isolator->set_error_handler(array($this, 'handleError'));\n        $this->installed = true;\n    }\n\n    public function uninstall()\n    {\n        if (!$this->installed) {\n            throw new RuntimeException('Not installed.');\n        }\n\n        $this->isolator->restore_error_handler();\n        $this->installed = false;\n    }\n\n    public function handleError($severity, $message, $filename, $lineno)\n    {\n        if (\n            E_DEPRECATED === $severity ||\n            E_USER_DEPRECATED === $severity ||\n            0 === $this->isolator->error_reporting()\n        ) {\n            return false;\n        }\n\n        throw new ErrorException($message, 0, $severity, $filename, $lineno);\n    }\n\n    protected $installed = false;\n    protected $isolator;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,8,8,null,null,null,4,1,null,4,1,null,null,3,3,3,null,null,null,2,1,null,null,1,1,1,null,null,null,null,2,2,2,2,1,null,null,1,null,null,null,null,null]},{"name":"Support\/Composer\/Autoload\/ClassMapGenerator.php","source":"<?php\n\/\/ @codeCoverageIgnoreStart\n\n\/*\n * This file is copied from the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\n * @license MIT\n *\/\n\nnamespace Icecave\\Archer\\Support\\Composer\\Autoload;\n\n\/**\n * ClassMapGenerator\n *\n * @author Gyula Sallai <salla016@gmail.com>\n *\/\nclass ClassMapGenerator\n{\n    \/**\n     * Extract the classes in the given file\n     *\n     * @param  string            $path The file to check\n     * @throws \\RuntimeException\n     * @return array             The found classes\n     *\/\n    public static function findClasses($path)\n    {\n        $traits = version_compare(PHP_VERSION, '5.4', '<') ? '' : '|trait';\n\n        try {\n            $contents = php_strip_whitespace($path);\n        } catch (\\Exception $e) {\n            throw new \\RuntimeException('Could not scan for classes inside '.$path.\": \\n\".$e->getMessage(), 0, $e);\n        }\n\n        \/\/ return early if there is no chance of matching anything in this file\n        if (!preg_match('{\\b(?:class|interface'.$traits.')\\s}i', $contents)) {\n            return array();\n        }\n\n        \/\/ strip heredocs\/nowdocs\n        $contents = preg_replace('{<<<\\'?(\\w+)\\'?(?:\\r\\n|\\n|\\r)(?:.*?)(?:\\r\\n|\\n|\\r)\\\\1(?=\\r\\n|\\n|\\r|;)}s', 'null', $contents);\n        \/\/ strip strings\n        $contents = preg_replace('{\"[^\"\\\\\\\\]*(\\\\\\\\.[^\"\\\\\\\\]*)*\"|\\'[^\\'\\\\\\\\]*(\\\\\\\\.[^\\'\\\\\\\\]*)*\\'}s', 'null', $contents);\n        \/\/ strip leading non-php code if needed\n        if (substr($contents, 0, 2) !== '<?') {\n            $contents = preg_replace('{^.+?<\\?}s', '<?', $contents);\n        }\n        \/\/ strip non-php blocks in the file\n        $contents = preg_replace('{\\?>.+<\\?}s', '?><?', $contents);\n        \/\/ strip trailing non-php code if needed\n        $pos = strrpos($contents, '?>');\n        if (false !== $pos && false === strpos(substr($contents, $pos), '<?')) {\n            $contents = substr($contents, 0, $pos);\n        }\n\n        preg_match_all('{\n            (?:\n                 \\b(?<![\\$:>])(?P<type>class|interface'.$traits.') \\s+ (?P<name>[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*)\n               | \\b(?<![\\$:>])(?P<ns>namespace) (?P<nsname>\\s+[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*(?:\\s*\\\\\\\\\\s*[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*)*)? \\s*[\\{;]\n            )\n        }ix', $contents, $matches);\n\n        $classes = array();\n        $namespace = '';\n\n        for ($i = 0, $len = count($matches['type']); $i < $len; $i++) {\n            if (!empty($matches['ns'][$i])) {\n                $namespace = str_replace(array(' ', \"\\t\", \"\\r\", \"\\n\"), '', $matches['nsname'][$i]) . '\\\\';\n            } else {\n                $classes[] = ltrim($namespace . $matches['name'][$i], '\\\\');\n            }\n        }\n\n        return $classes;\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,0,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Support\/Isolator.php","source":"<?php\nnamespace Icecave\\Archer\\Support;\n\n\/**\n * This class is a partial implementation of icecave\/isolator, provided here to prevent\n * circular dependencies and namespace clashes.\n *\n * Please see https:\/\/github.com\/IcecaveStudios\/isolator for a usable implementation.\n *\/\nclass Isolator\n{\n    public static function get(Isolator $instance = NULL)\n    {\n        if ($instance) {\n            return $instance;\n        } elseif (self::$instance) {\n            return self::$instance;\n        } else {\n            return self::$instance = new self;\n        }\n    }\n\n    public static function className()\n    {\n        return get_class(static::get());\n    }\n\n    public static function resetIsolator()\n    {\n        self::$instance = null;\n    }\n\n    public function __call($name, array $arguments)\n    {\n        switch ($name) {\n            case 'exit':\n            case 'die':\n                \/\/ @codeCoverageIgnoreStart\n                exit(current($arguments));\n                \/\/ @codeCoverageIgnoreEnd\n            case 'echo':\n                echo current($arguments);\n\n                return;\n            case 'eval':\n                return eval(current($arguments));\n            case 'include':\n                return include current($arguments);\n            case 'include_once':\n                return include_once current($arguments);\n            case 'require':\n                return require current($arguments);\n            case 'require_once':\n                return require_once current($arguments);\n            default:\n\n        }\n\n        return call_user_func_array($name, $arguments);\n    }\n\n    \/\/ @codeCoverageIgnoreStart\n\n    public function openssl_public_encrypt($data, &$crypted, $key, $padding = null)\n    {\n        if (null === $padding) {\n            return openssl_public_encrypt($data, $crypted, $key);\n        }\n\n        return openssl_public_encrypt($data, $crypted, $key, $padding);\n    }\n\n    public function exec($command, &$output = null, &$exitCode = null)\n    {\n        return exec($command, $output, $exitCode);\n    }\n\n    public function passthru($command, &$exitCode = null)\n    {\n        return passthru($command, $exitCode);\n    }\n\n    public function proc_open(\n        $command,\n        array $descriptors,\n        array &$pipes = null,\n        $workingDirectory = null,\n        array $environment = null,\n        array $options = array()\n    ) {\n        return proc_open($command, $descriptors, $pipes, $workingDirectory, $environment, $options);\n    }\n\n    \/\/ @codeCoverageIgnoreEnd\n\n    private static $instance;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,163,158,61,59,null,4,null,null,null,null,null,8,null,null,null,null,9,9,null,null,null,null,43,43,null,null,null,43,1,null,1,42,1,41,1,40,1,39,1,38,1,37,null,null,null,37,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Support\/Liftoff\/Exception\/LaunchException.php","source":"<?php\nnamespace Icecave\\Archer\\Support\\Liftoff\\Exception;\n\nuse Exception;\nuse RuntimeException;\n\n\/**\n * Launch command failed, or is unavailable.\n *\n * This class is a partial implementation of eloquent\/liftoff, provided here to prevent\n * circular dependencies and namespace clashes.\n *\n * Please see https:\/\/github.com\/eloquent\/liftoff for a usable implementation.\n *\/\nfinal class LaunchException extends RuntimeException\n{\n    \/**\n     * Create a new LaunchException instance.\n     *\n     * @param string         $target   The target that Liftoff attempted to launch.\n     * @param Exception|null $previous The previous exception, if available.\n     *\/\n    public function __construct($target, Exception $previous = null)\n    {\n        $this->target = $target;\n\n        parent::__construct(\n            sprintf('Unable to launch %s.', var_export($target, true)),\n            0,\n            $previous\n        );\n    }\n\n    \/**\n     * Get the target that Liftoff attempted to launch.\n     *\n     * @return string The target that Liftoff attempted to launch.\n     *\/\n    public function target()\n    {\n        return $this->target;\n    }\n\n    private $target;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,2,null,2,2,2,null,2,2,null,null,null,null,null,null,null,null,1,null,null,null,null]},{"name":"Support\/Liftoff\/Launcher.php","source":"<?php\nnamespace Icecave\\Archer\\Support\\Liftoff;\n\nuse Icecave\\Archer\\Support\\Isolator;\n\n\/**\n * Launches files in their default GUI application.\n *\n * This class is a partial implementation of eloquent\/liftoff, provided here to prevent\n * circular dependencies and namespace clashes.\n *\n * Please see https:\/\/github.com\/eloquent\/liftoff for a usable implementation.\n *\/\nclass Launcher\n{\n    \/**\n     * Create a new Launcher instance.\n     *\n     * @param Isolator|null $isolator\n     *\/\n    public function __construct(Isolator $isolator = null)\n    {\n        $this->isolator = Isolator::get($isolator);\n    }\n\n    \/**\n     * Launch a file or URI in its default GUI application.\n     *\n     * @param string             $target    The path or URI to launch.\n     * @param array<string>|null $arguments An array of arguments to pass to the\n     *                                      associated application.\n     *\n     * @throws Exception\\LaunchException If the launch command fails, or is\n     *                                   unavailable.\n     *\/\n    public function launch($target, array $arguments = null)\n    {\n        if (null === $arguments) {\n            $arguments = array();\n        }\n\n        $os = $this->isolator->php_uname('s');\n\n        if ('win' === strtolower(substr($os, 0, 3))) {\n            $this->launchWindows($target, $arguments);\n        } elseif ('Darwin' === $os) {\n            $this->launchOsx($target, $arguments);\n        } else {\n            $this->launchUnix($target, $arguments);\n        }\n    }\n\n    \/**\n     * @param string        $target\n     * @param array<string> $arguments\n     *\n     * @throws Exception\\LaunchException\n     *\/\n    protected function launchOsx($target, array $arguments)\n    {\n        if (count($arguments) > 0) {\n            array_unshift($arguments, '--args');\n        }\n        array_unshift($arguments, $target);\n\n        $this->launchCommand('open', $arguments);\n    }\n\n    \/**\n     * @param string        $target\n     * @param array<string> $arguments\n     *\n     * @throws Exception\\LaunchException\n     *\/\n    protected function launchUnix($target, array $arguments)\n    {\n        array_unshift($arguments, $target);\n\n        $this->launchCommand('xdg-open', $arguments);\n    }\n\n    \/**\n     * @param string        $target\n     * @param array<string> $arguments\n     *\n     * @throws Exception\\LaunchException\n     *\/\n    protected function launchWindows($target, array $arguments)\n    {\n        array_unshift($arguments, \"liftoff\", $target);\n\n        $this->launchCommand('start', $arguments);\n    }\n\n    \/**\n     * @param string        $command\n     * @param array<string> $arguments\n     *\n     * @throws Exception\\LaunchException\n     *\/\n    protected function launchCommand($command, array $arguments)\n    {\n        $command = implode(\n            ' ',\n            array_merge(\n                array($command),\n                array_map('escapeshellarg', $arguments)\n            )\n        );\n\n        $handle = $this->isolator->proc_open(\n            $command,\n            array(\n                array('pipe', 'r'),\n                array('pipe', 'w'),\n                array('pipe', 'w'),\n            ),\n            $pipes\n        );\n        if (false === $handle) {\n            throw new Exception\\LaunchException($arguments[0]);\n        }\n\n        foreach ($pipes as $pipe) {\n            $this->isolator->fclose($pipe);\n        }\n        $this->isolator->proc_close($handle);\n    }\n\n    private $isolator;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,49,49,null,null,null,null,null,null,null,null,null,null,null,null,null,7,4,null,null,7,null,7,2,7,2,2,3,null,6,null,null,null,null,null,null,null,null,null,2,1,null,2,null,2,2,null,null,null,null,null,null,null,null,null,3,null,3,2,null,null,null,null,null,null,null,null,null,2,null,2,2,null,null,null,null,null,null,null,null,null,7,7,7,7,7,7,7,null,7,7,null,7,7,7,7,null,7,7,1,null,null,6,6,6,6,6,null,null,null]},{"name":"Travis\/TravisClient.php","source":"<?php\nnamespace Icecave\\Archer\\Travis;\n\nuse RuntimeException;\nuse Icecave\\Archer\\FileSystem\\FileSystem;\nuse Icecave\\Archer\\Support\\Isolator;\n\nclass TravisClient\n{\n    \/**\n     * @param FileSystem|null $fileSystem\n     * @param Isolator|null   $isolator\n     *\/\n    public function __construct(\n        FileSystem $fileSystem = null,\n        Isolator $isolator = null\n    ) {\n        if (null === $fileSystem) {\n            $fileSystem = new FileSystem;\n        }\n\n        $this->fileSystem = $fileSystem;\n        $this->isolator = Isolator::get($isolator);\n    }\n\n    \/**\n     * @return FileSystem\n     *\/\n    public function fileSystem()\n    {\n        return $this->fileSystem;\n    }\n\n    \/**\n     * @param string $repoOwner\n     * @param string $repoName\n     *\n     * @return string\n     *\/\n    public function publicKey($repoOwner, $repoName)\n    {\n        $response = $this->fileSystem()->read(\n            sprintf(\n                'https:\/\/api.travis-ci.org\/repos\/%s\/%s\/key',\n                urlencode($repoOwner),\n                urlencode($repoName)\n            )\n        );\n\n        return json_decode($response)->key;\n    }\n\n    \/**\n     * @param string $publicKey\n     * @param string $gitHubToken\n     *\n     * @return string\n     *\/\n    public function encryptEnvironment($publicKey, $gitHubToken)\n    {\n        return $this->encrypt(\n            $publicKey,\n            sprintf('ARCHER_TOKEN=\"%s\"', $gitHubToken)\n        );\n    }\n\n    \/**\n     * @param string $publicKey\n     * @param string $plainText\n     *\n     * @return string\n     *\/\n    public function encrypt($publicKey, $plainText)\n    {\n        $cipherText = null;\n        $result = $this->isolator->openssl_public_encrypt(\n            $plainText,\n            $cipherText,\n            str_replace('RSA PUBLIC KEY', 'PUBLIC KEY', $publicKey)\n        );\n        if (!$result) {\n            throw new RuntimeException('Encryption failed.');\n        }\n\n        return base64_encode($cipherText);\n    }\n\n    private $fileSystem;\n    private $isolator;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,47,42,null,null,47,47,47,null,null,null,null,null,null,3,null,null,null,null,null,null,null,null,null,null,1,1,1,1,1,1,1,null,1,null,null,null,null,null,null,null,null,null,null,1,1,1,1,null,null,null,null,null,null,null,null,null,null,3,3,3,3,3,3,3,1,null,null,2,null,null,null,null,null]},{"name":"Travis\/TravisConfigManager.php","source":"<?php\nnamespace Icecave\\Archer\\Travis;\n\nuse Icecave\\Archer\\Configuration\\ComposerConfigurationReader;\nuse Icecave\\Archer\\Configuration\\ConfigurationFileFinder;\nuse Icecave\\Archer\\FileSystem\\FileSystem;\nuse Icecave\\Archer\\Support\\Composer\\Package\\LinkConstraint\\VersionConstraint;\nuse Icecave\\Archer\\Support\\Composer\\Package\\Version\\VersionParser;\nuse Icecave\\Archer\\Support\\Isolator;\n\nclass TravisConfigManager\n{\n    \/**\n     * @param FileSystem|null                  $fileSystem\n     * @param ConfigurationFileFinder|null     $fileFinder\n     * @param ComposerConfigurationReader|null $composerConfigReader\n     * @param Isolator|null                    $isolator\n     *\/\n    public function __construct(\n        FileSystem $fileSystem = null,\n        ConfigurationFileFinder $fileFinder = null,\n        ComposerConfigurationReader $composerConfigReader = null,\n        Isolator $isolator = null\n    ) {\n        if (null === $fileSystem) {\n            $fileSystem = new FileSystem;\n        }\n        if (null === $fileFinder) {\n            $fileFinder = new ConfigurationFileFinder;\n        }\n        if (null === $composerConfigReader) {\n            $composerConfigReader = new ComposerConfigurationReader;\n        }\n\n        $this->fileSystem = $fileSystem;\n        $this->fileFinder = $fileFinder;\n        $this->composerConfigReader = $composerConfigReader;\n        $this->versionParser = new VersionParser;\n        $this->isolator = Isolator::get($isolator);\n    }\n\n    \/**\n     * @return FileSystem\n     *\/\n    public function fileSystem()\n    {\n        return $this->fileSystem;\n    }\n\n    \/**\n     * @return ConfigurationFileFinder\n     *\/\n    public function fileFinder()\n    {\n        return $this->fileFinder;\n    }\n\n    \/**\n     * @return ComposerConfigurationReader\n     *\/\n    public function composerConfigReader()\n    {\n        return $this->composerConfigReader;\n    }\n\n    \/**\n     * @param string $packageRoot\n     *\n     * @return string|null\n     *\/\n    public function publicKeyCache($packageRoot)\n    {\n        $publicKeyPath = sprintf('%s\/.travis.key', $packageRoot);\n        if ($this->fileSystem()->fileExists($publicKeyPath)) {\n            return $this->fileSystem()->read($publicKeyPath);\n        }\n\n        return null;\n    }\n\n    \/**\n     * @param string      $packageRoot\n     * @param string|null $publicKey\n     *\n     * @return boolean\n     *\/\n    public function setPublicKeyCache($packageRoot, $publicKey)\n    {\n        $publicKeyPath = sprintf('%s\/.travis.key', $packageRoot);\n\n        \/\/ Key is the same as existing one, do nothing ...\n        if ($this->publicKeyCache($packageRoot) === $publicKey) {\n            return false;\n\n        \/\/ Key is null, remove file ...\n        } elseif (null === $publicKey) {\n            $this->fileSystem()->delete($publicKeyPath);\n\n        \/\/ Key is provided, write file ...\n        } else {\n            $this->fileSystem()->write($publicKeyPath, $publicKey);\n        }\n\n        return true;\n    }\n\n    \/**\n     * @param string $packageRoot\n     *\n     * @return string|null\n     *\/\n    public function secureEnvironmentCache($packageRoot)\n    {\n        $envPath = sprintf('%s\/.travis.env', $packageRoot);\n        if ($this->fileSystem()->fileExists($envPath)) {\n            return $this->fileSystem()->read($envPath);\n        }\n\n        return null;\n    }\n\n    \/**\n     * @param string      $packageRoot\n     * @param string|null $secureEnvironment\n     *\n     * @return boolean\n     *\/\n    public function setSecureEnvironmentCache($packageRoot, $secureEnvironment)\n    {\n        $envPath = sprintf('%s\/.travis.env', $packageRoot);\n\n        \/\/ Environment is the same as existing one, do nothing ...\n        if ($this->secureEnvironmentCache($packageRoot) === $secureEnvironment) {\n            return false;\n\n        \/\/ Environment is null, remove file ...\n        } elseif (null === $secureEnvironment) {\n            $this->fileSystem()->delete($envPath);\n\n        \/\/ Environment is provided, write file ...\n        } else {\n            $this->fileSystem()->write($envPath, $secureEnvironment);\n        }\n\n        return true;\n    }\n\n    \/**\n     * @param string $archerPackageRoot\n     * @param string $packageRoot\n     *\n     * @return boolean\n     *\/\n    public function updateConfig($archerPackageRoot, $packageRoot)\n    {\n        $source = sprintf('%s\/res\/travis\/travis.install.php', $archerPackageRoot);\n        $target = sprintf('%s\/.travis.install', $packageRoot);\n        $this->fileSystem()->copy($source, $target);\n        $this->fileSystem()->chmod($target, 0755);\n\n        $secureEnvironment = $this->secureEnvironmentCache($packageRoot);\n\n        if ($secureEnvironment) {\n            $tokenEnvironment = sprintf('- secure: \"%s\"', $secureEnvironment);\n        } else {\n            $tokenEnvironment = '';\n        }\n\n        list($phpVersions, $phpPublishVersion) = $this->phpVersions($packageRoot);\n\n        $allowFailureVersions = $this->allowFailureVersions($phpVersions);\n        if (count($allowFailureVersions) > 0) {\n            $allowFailureVersions = '[{\"php\": \"' . implode('\"}, {\"php\": \"', $allowFailureVersions) . '\"}]';\n\n            $template = $this->fileSystem()->read(\n                $this->findTemplatePath($archerPackageRoot, $packageRoot, $secureEnvironment !== null, 'travis-matrix')\n            );\n            $matrix = str_replace(array('{allow-failure-versions}'), array($allowFailureVersions), $template);\n        } else {\n            $matrix = '';\n        }\n\n        $phpVersions = '[\"' . implode('\", \"', $phpVersions) . '\"]';\n\n        \/\/ Re-build travis.yml.\n        $template = $this->fileSystem()->read(\n            $this->findTemplatePath($archerPackageRoot, $packageRoot, $secureEnvironment !== null)\n        );\n\n        $this->fileSystem()->write(\n            sprintf('%s\/.travis.yml', $packageRoot),\n            str_replace(\n                array('{token-env}', '{php-versions}', '{matrix}', '{php-publish-version}'),\n                array($tokenEnvironment, $phpVersions, $matrix, $phpPublishVersion),\n                $template\n            )\n        );\n\n        \/\/ Return true if artifact publication is enabled.\n        return $secureEnvironment !== null;\n    }\n\n    \/**\n     * @param string  $archerPackageRoot\n     * @param string  $packageRoot\n     * @param boolean $hasEncryptedEnvironment\n     *\n     * @return string\n     *\/\n    protected function findTemplatePath($archerPackageRoot, $packageRoot, $hasSecureEnvironment, $templateName = null)\n    {\n        return $this->fileFinder()->find(\n            $this->candidateTemplatePaths($packageRoot, $hasSecureEnvironment, $templateName),\n            $this->defaultTemplatePath($archerPackageRoot, $hasSecureEnvironment, $templateName)\n        );\n    }\n\n    \/**\n     * @param string  $packageRoot\n     * @param boolean $hasSecureEnvironment\n     *\n     * @return array<string>\n     *\/\n    protected function candidateTemplatePaths($packageRoot, $hasSecureEnvironment, $templateName = null)\n    {\n        return array(\n            sprintf(\n                '%s\/test\/%s',\n                $packageRoot,\n                $this->templateFilename($hasSecureEnvironment, $templateName)\n            )\n        );\n    }\n\n    \/**\n     * @param string  $archerPackageRoot\n     * @param boolean $hasSecureEnvironment\n     *\n     * @return string\n     *\/\n    protected function defaultTemplatePath($archerPackageRoot, $hasSecureEnvironment, $templateName = null)\n    {\n        return sprintf(\n            '%s\/res\/travis\/%s',\n            $archerPackageRoot,\n            $this->templateFilename($hasSecureEnvironment, $templateName)\n        );\n    }\n\n    protected function templateFilename($hasSecureEnvironment, $templateName = null)\n    {\n        if (null === $templateName) {\n            $templateName = 'travis';\n        }\n\n        return $templateName . '.tpl.yml';\n    }\n\n    protected function phpVersions($packageRoot)\n    {\n        list($phpVersions, $phpPublishVersion) = $this->numericPhpVersions($packageRoot);\n\n        return array(array_merge($phpVersions, static::$alternateVersions), $phpPublishVersion);\n    }\n\n    protected function numericPhpVersions($packageRoot)\n    {\n        $phpVersions = array_merge(static::$stableVersions, static::$unstableVersions);\n\n        $config = $this->composerConfigReader->read($packageRoot);\n\n        \/\/ If there is no constraint specified in the composer\n        \/\/ configuration then use all available versions.\n        if (!isset($config->require->php)) {\n            return array($phpVersions, static::$stableVersions[count(static::$stableVersions) - 1]);\n        }\n\n        \/\/ Parse the constraint ...\n        $constraint = $this->versionParser->parseConstraints($config->require->php);\n        $filteredVersions = array();\n        $phpPublishVersion = null;\n\n        \/\/ Check each available version against the constraint ...\n        foreach ($phpVersions as $version) {\n            $provider = new VersionConstraint('=', $this->versionParser->normalize($version . '.' . PHP_INT_MAX));\n            if ($constraint->matches($provider)) {\n                $filteredVersions[] = $version;\n\n                if (null === $phpPublishVersion || in_array($version, static::$stableVersions, true)) {\n                    $phpPublishVersion = $version;\n                }\n            }\n        }\n\n        \/\/ No matches were found, use the latest stable version that travis supports ...\n        if (0 === count($filteredVersions)) {\n            $latestStable = static::$stableVersions[count(static::$stableVersions) - 1];\n\n            return array(array($latestStable), $latestStable);\n        }\n\n        return array($filteredVersions, $phpPublishVersion);\n    }\n\n    protected function allowFailureVersions(array $phpVersions)\n    {\n        $unstableVersions = array_merge(static::$unstableVersions, static::$alternateVersions);\n\n        $allowFailureVersions = array();\n        foreach ($phpVersions as $version) {\n            if (in_array($version, $unstableVersions, true)) {\n                $allowFailureVersions[] = $version;\n            }\n        }\n\n        return $allowFailureVersions;\n    }\n\n    \/**\n     * Stable PHP versions supported by Travis.\n     *\/\n    private static $stableVersions = array('5.3', '5.4', '5.5');\n\n    \/**\n     * Unstable PHP versions supported by Travis.\n     *\/\n    private static $unstableVersions = array('5.6');\n\n    \/**\n     * Alternate PHP versions supported by Travis.\n     *\/\n    private static $alternateVersions = array('hhvm');\n\n    private $fileSystem;\n    private $fileFinder;\n    private $composerConfigReader;\n    private $versionParser;\n    private $isolator;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,62,42,null,62,42,null,62,42,null,null,62,62,62,62,62,62,null,null,null,null,null,null,21,null,null,null,null,null,null,null,11,null,null,null,null,null,null,null,2,null,null,null,null,null,null,null,null,null,5,5,3,null,null,2,null,null,null,null,null,null,null,null,null,null,3,null,null,3,1,null,null,2,1,null,null,1,1,null,null,2,null,null,null,null,null,null,null,null,null,14,14,4,null,null,10,null,null,null,null,null,null,null,null,null,null,3,null,null,3,1,null,null,2,1,null,null,1,1,null,null,2,null,null,null,null,null,null,null,null,null,null,9,9,9,9,null,9,null,9,1,1,8,null,null,9,null,9,9,9,null,9,9,9,9,9,0,null,null,9,null,null,9,9,9,null,9,9,9,9,9,null,9,9,null,null,9,null,null,null,null,null,null,null,null,null,null,null,9,9,9,9,null,null,null,null,null,null,null,null,null,null,null,9,9,9,9,9,9,null,null,null,null,null,null,null,null,null,null,9,9,9,9,9,null,null,null,null,9,9,null,null,9,null,null,null,null,9,null,9,null,null,null,null,9,null,9,null,null,null,9,1,null,null,null,8,8,8,null,null,8,8,8,6,null,6,6,null,null,8,null,null,8,2,null,2,null,null,6,null,null,null,null,9,null,9,9,9,9,null,9,null,9,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]}]}